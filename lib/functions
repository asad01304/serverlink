#!/bin/bash

# avoid a warning on MacOS X because md5sum doesn't exist
if [ -n "$OSTYPE" ] && [[ "$OSTYPE" =~ ^darwin ]] && hash md5 &>/dev/null; then
  hash -p $(which md5) md5sum
fi

error() {
  local msg="$1"
  local exit_code="${2:-1}"

  [ -n "$msg" ] && echo "Error: $msg" 1>&2
  exit $exit_code
}

wedp_warn() {
  local msg="$1"

  echo "Warning: $msg" 1>&2
}

devpanel_auto_detect_distro() {
  local distro=""

  # can't use local -l below because of systems with bash 3
  local lsb_distro_str="" lsb_distro_raw=""

  if hash lsb_release &>/dev/null; then
    lsb_distro_raw=`lsb_release -si 2>/dev/null`
    lsb_distro_str=`echo -n "$lsb_distro_raw" | tr A-Z a-z`
  fi

  if [ -n "$lsb_distro_str" ]; then
    distro="$lsb_distro_str"
  elif [ -r /etc/debian_version ] && apt-cache show lsb-base | egrep -q '^Maintainer: .+debian\.org>'; then
    distro=debian
  elif [ -r /etc/debian_version ] && apt-cache show lsb-base | egrep -q '^Maintainer: .+ubuntu\.com>'; then
    distro=ubuntu
  elif hash rpm &>/dev/null && rpm -ql centos-release &>/dev/null; then
    distro=centos
  elif hash rpm &>/dev/null && rpm -ql redhat-release-server &>/dev/null; then
    distro=redhat
  elif hash rpm &>/dev/null && rpm -ql owl-hier >/dev/null 2>&1; then
    distro=owl
  elif [[ "$OSTYPE" =~ ^darwin ]]; then
    distro=macosx
  fi

  if [ -n "$distro" ]; then
    echo "$distro"
    return 0
  else
    return 1
  fi
}

wedp_auto_detect_distro() {
  local distro=""

  # can't use local -l below because of systems with bash 3
  local lsb_distro_str="" lsb_distro_raw=""

  if hash lsb_release &>/dev/null; then
    lsb_distro_raw=`lsb_release -si 2>/dev/null`
    lsb_distro_str=`echo -n "$lsb_distro_raw" | tr A-Z a-z`
  fi

  if [ -n "$lsb_distro_str" ]; then
    distro="$lsb_distro_str"
  elif grep -qis centos /etc/redhat-release; then
    distro=centos
  elif grep -qis "Red Hat Enterprise Linux" /etc/redhat-release; then
    distro=redhat
  elif grep -qis fedora /etc/redhat-release; then
    distro=fedora
  elif rpm -ql owl-hier >/dev/null 2>&1; then
    distro=owl
  elif [ -r /etc/debian_version ] && apt-cache show lsb-base | egrep -q '^Maintainer: .+debian\.org>'; then
    distro=debian
  elif [ -r /etc/debian_version ] && apt-cache show lsb-base | egrep -q '^Maintainer: .+ubuntu\.com>'; then
    distro=ubuntu
  elif [ -r /etc/gentoo-release ]; then
    distro=gentoo
  elif [[ "$OSTYPE" =~ ^darwin ]]; then
    distro=macosx
  fi

  if [ -n "$distro" ]; then
    echo "$distro"
    return 0
  else
    return 1
  fi
}

wedp_auto_detect_distro_version() {
  local distro="$1"
  local version_str="" version_number=""

  if hash lsb_release &>/dev/null; then
    version_number=`lsb_release -sr`
    [ $? -ne 0 ] && return 1
  elif [ "$distro" == "centos" ]; then
      version_str=$(head -1 "/etc/redhat-release" 2>/dev/null)
      [ $? -ne 0 ] && return 1

      # the line below is an invalid syntax on older systems with bash 3
      #if [[ "$version_str" =~ CentOS\ release\ ([0-9]+\.[0-9]+) ]]; then
      # so we have to pipe fgrep and egrep to have a compatible way on all
      # systems
      version_number=`echo "$version_str" | fgrep 'CentOS release' 2>/dev/null | egrep -o '[0-9]+\.[0-9]+ 2>/dev/null'`
  fi

  if [ -n "$version_number" ]; then
    echo -n "$version_number"
    return 0
  else
    return 1
  fi
}

print_quoted_variables() {
  local line=""
  local var=""

  for var in "$@"; do
    line=$(declare -p $var)
    line=${line#declare -x}
    echo $line
  done
}

escape_sed() {
  local str="$1"
  local escaped="$str"

  escaped=${escaped//\'/\\\'}
  escaped=${escaped//\*/\\*}
  escaped=${escaped//\;/\\;}
  escaped=${escaped//\[/\\[}
  escaped=${escaped//\]/\\]}
  escaped=${escaped//\\+/+\]}
  escaped=${escaped//\\\?/\?}
  escaped=${escaped//\\\(/\(}
  escaped=${escaped//\\\)/\)}
  escaped=${escaped//\//\\/}
  escaped=${escaped//\&/\\\&}
  escaped=${escaped//$'\n'/\\n}

  echo -n "$escaped"
}

in_array() {
  local value="$1"
  shift

  local v

  [ -z "$*" ] && return 1 # empty list

  for v in "$@"; do
    if [ "$v" == "$value" ]; then
      return 0
    fi
  done

  return 1
}

# the function below is a candidate to be removed as it's much better to use
# variable ${BASH_SOURCE[0]}, though not removing it now because not sure if
# it's being used by other scripts
resolve_local_dir() {
  local base="$1"
  local bin=""
  local bin_path=""
  local dir_name=""

  [ ${#base} -eq 0 ] && return 1

  if [ ${base:0:1} == "/" ]; then
    echo $(dirname "$base")
    return 0
  elif [ ${#base} -gt 2 -a ${base:0:2} == "./" ]; then
    base=${base#./}
    dir_name=$(dirname "$base")
    if [ "$dir_name" == "." ]; then
      echo "$PWD"
    else
      echo "$PWD/$dir_name"
    fi 
    return 0
  elif [ ${#base} -gt 2 -a ${base:0:3} == "../" ]; then
    echo $(dirname "$PWD/$base")
  else
    return 1
  fi 
}

wedp_resolve_link() {
  local source="$1"
  local target=""

  [ -z "$source" ] && return 1

  target=$(readlink -m "$source")
  if [ $? -eq 0 ]; then
    echo "$target"
    return 0
  else
    return 1
  fi
}

wedp_gen_random_str() {
  local length=${1:-40}

  local str=$(head -c $(( $length * 30 )) /dev/urandom | tr -dc 'A-Za-z0-9')

  if [ ${#str} -lt $length ]; then
    return 1
  else
    echo "${str:0:$length}"
    return 0
  fi
}

download_file() {
  local url="$1"
  local temp_file="$2"
  local retries=${3:-3}
  local wait_before_retry=${4:-20}

  if hash curl &>/dev/null; then
    curl -L -f --retry $retries --retry-delay $wait_before_retry -s -o "$temp_file" "$url"
    status=$?
  elif hash wget &>/dev/null; then
    wget -t $retries -w $wait_before_retry -nv -O "$temp_file" "$url"
    status=$?
  fi

  return $status
}

get_url_from_cache() {
  local url="$1"
  local retries=${3:-3}
  local wait_before_retry=${4:-5}

  local cache_dir=""
  if [ -n "$DEVPANEL_HOME" ]; then
    cache_dir="$DEVPANEL_HOME/var/seedapps_cache"
  else
    return 1
  fi

  local md5_txt=$(echo -n "$url" | md5sum | cut -d' ' -f 1)

  local cache_link="$cache_dir/$md5_txt:etag"
  if [ ! -L "$cache_link" ]; then
    return 1
  fi

  local tmp_headers_f=$(mktemp)
  if [ $? -ne 0 ]; then
    echo "$FUNCNAME(): unable to create temporary file" 1>&2
    return 1
  fi

  local resp_raw=""
  resp_raw=$(curl -w "%{http_code}"  -s -I \
    --retry $retries --retry-delay $wait_before_retry \
    -D "$tmp_headers_f" -o /dev/null "$url")
  local curl_st=$?

  code=${resp_raw%%*|}
  if [ $curl_st -ne 0 -o "$code" != "200"  ]; then
    rm -f -- "$tmp_headers_f"
    return 1
  fi

  local etag_raw=$(egrep -i ^ETAG: "$tmp_headers_f")
  if [ $? -ne 0 ]; then
    rm -f -- "$tmp_headers_f"
    return 1
  fi
  local etag_txt="${etag_raw#*: }"
  etag_txt=${etag_txt//[^a-f0-9-]/}

  rm -f -- "$tmp_headers_f"

  local etag_cached=$(readlink "$cache_link")
  if [ $? -ne 0 ]; then
    return 1
  fi

  if [ "$etag_txt" != "$etag_cached" ]; then
    return 1
  fi

  local cached_file="${cache_link%:etag}"
  if [ -s "$cached_file" ]; then
    echo -n "$cached_file"
    return 0
  else
    return 1
  fi
}

download_url_n_cache() {
  local url="$1"
  local temp_file="$2"
  local retries=${3:-3}
  local wait_before_retry=${4:-5}

  local tmp_headers_f=$(mktemp)
  if [ $? -ne 0 ]; then
    echo "$FUNCNAME(): unable to create temp file" 1>&2
    return 1
  fi

  local code="" error_msg="" resp_raw=""

  resp_raw=$(curl -w "%{http_code}"  -sL --retry $retries --retry-delay $wait_before_retry \
          -D "$tmp_headers_f" -o "$temp_file" "$url")
  local curl_st=$?

  code=${resp_raw%%*|}
  if [ $curl_st -ne 0 -o "$code" != "200"  ]; then
    rm -f -- "$tmp_headers_f"
    echo "$FUNCNAME(): failed to retrieve url $url" 1>&2
    return 1
  fi

  local etag_raw=$(egrep -i ^ETag: "$tmp_headers_f")
  if [ $? -ne 0 ]; then
    return 0 # won't cache, but it's fine, the file is downloaded
  fi

  local etag=${etag_raw#*: }
  if [ -z "$etag" ]; then
    return 0 # won't cache, but it's fine, the file is downloaded
  fi
  etag=${etag//[^a-f0-9-]/}

  local cache_dir="" mydir="" myfile=""
  if [ -n "$DEVPANEL_HOME" ]; then
    cache_dir="$DEVPANEL_HOME/var/seedapps_cache"
  else
    return 0
  fi 

  local md5_str=$(echo -n "$url" | md5sum | cut -d' ' -f 1)

  if [ -d "$cache_dir" ]; then
    local cache_file="$cache_dir/$md5_str:etag"
    ln -sf "$etag" "$cache_file"
    if [ $? -eq 0 ]; then
      local dest_file="${cache_file%:etag}"

      # the line below does the actual caching
      cp -f "$temp_file" "$dest_file"
    fi
  fi

  return 0
}

ini_section_get_key_value() {
  local file="$1"
  local section=`escape_sed "$2"`
  local key=`escape_sed "$3"`

  sed -n -e "/^\[$section\]/,/^\[/ {
    /^\($key\)[[:space:]]*=.*$/ { s/^$key[[:space:]]*=[[:space:]]*//; p; q 0; }
  } ; $ q 1;" "$file"
}

ini_section_replace_key_value() {
  local file="$1"
  local section=`escape_sed "$2"`
  local key=`escape_sed "$3"`
  local value=`escape_sed "$4"`

  local orig_md5 final_md5

  orig_md5=`md5sum "$file"`
  if [[ "$OSTYPE" =~ ^darwin ]]; then
    orig_md5=${orig_md5##* }
  else
    orig_md5=${orig_md5%% *}
  fi

  sed -i -e "/^\[$section\]/,/^\[/ {
    /^\($key\)[[:space:]]*=.*$/ {
      s/^\($key\)[[:space:]]*=.*$/\1 = $value/g;
    }
  }" "$file"

  local status=$?
  [ $status -ne 0 ] && return $status

  final_md5=`md5sum "$file"`
  if [[ "$OSTYPE" =~ ^darwin ]]; then
    final_md5=${final_md5##* }
  else
    final_md5=${final_md5%% *}
  fi

  if [ "$orig_md5" != "$final_md5" ]; then
    return 0 # file changed, success!
  else
    return 1 # file is the same, replace failed
  fi
}

ini_section_add_key_value() {
  local file="$1"
  local section=`escape_sed "$2"`
  local key=`escape_sed "$3"`
  local value=`escape_sed "$4"`

  local orig_md5=`md5sum "$file"`
  orig_md5=${orig_md5%% *}

  sed -i -e "/^\[$section\]/ {
    a \
$key = $value
}" "$file"

  local final_md5=`md5sum "$file"`
  final_md5=${final_md5%% *}

  if [ "$orig_md5" != "$final_md5" ]; then
    return 0 # file changed, success!
  else
    return 1 # file is the same, add failed
  fi
}

get_sshkey_fingerprint() {
  local key_text="$1"
  local tmp_file
  local key_line

  tmp_file=`mktemp`
  if [ $? -ne 0 ]; then
    echo "${FUNCNAME[0]}(): could not create temporary file to store the key" 1>&2
    return 1
  fi

  echo "$key_text" >"$tmp_file"
  if [ $? -ne 0 ]; then
    echo "${FUNCNAME[0]}(): could not store the key contents into tmpfile '$tmp_file'" 1>&2
    rm -f "$tmp_file"
    return 1
  fi

  key_line=`ssh-keygen -f "$tmp_file" -l`
  if [ $? -ne 0 ]; then
    echo "${FUNCNAME[0]}(): uname to calculate key fingerprint" 1>&2
    rm -f "$tmp_file"
    return 1
  fi

  rm -f "$tmp_file"

  local key_size key_fingerprint key_input_text
  IFS=" " read key_size fingerprint key_input_text <<< "$key_line"
  if [ -z "$fingerprint" ]; then
    echo "${FUNCNAME[0]}(): got an empty fingerprint" 1>&2
    return 1
  fi

  echo "$fingerprint"
  return 0
}

is_sshkey_in_keyfile() {
  local desired_fp="$1"
  local key_file="$2"
  local fp_list
  local key_line key_mod_size key_fp key_txt

  if ! fp_list=`ssh-keygen -f "$key_file" -l`; then
    echo "${FUNCNAME[0]}(): could not get the list of fingerprints" 1>&2
    return 1
  fi

  while read key_line; do
    IFS=" " read key_size key_fp key_txt <<< "$key_line"
    if [ "$key_fp" == "$desired_fp" ]; then
      return 0
    fi
  done <<< "$fp_list"

  return 1
}

devpanel_download_pkg() {
  local package="$1"
  local version="$2"
  local base_url="$3"
  local tmp_dir="${4:-/tmp}"

  local pkg_url="$base_url/$pkg_n_version.tar.gz"

  local tmp_pkg_dir="$tmp_dir/pkgs"
  if [ ! -d "$tmp_pkg_dir" ] && ! mkdir -m 700 "$tmp_pkg_dir"; then
    echo "$FUNCNAME(): unable to create temp dir '$tmp_pkg_dir'" 1>&2
    return 1
  fi

  if ! download_file "$pkg_url" "$tmp_file"; then
    echo "$FUNCNAME(): unable to download package '$package'" 1>&2
    return 1
  fi
}

devpanel_install_pkg() {
  local package="$1"
  local version="$2"
  local file="$3"
  local system_dir="$4"

  local tmp_pkg_dir=`dirname "$file"`/"$package-$version"
  if ! mkdir "$tmp_pkg_dir" ; then
    echo "$FUNCNAME(): unable to create temp dir '$tmp_pkg_dir'" 1>&2
    return 1
  fi

  local pkg_register_dir="$system_dir/config/packages/$package"
  if [ ! -d "$pkg_register_dir" ] && ! mkdir "$pkg_register_dir"; then
    echo "$FUNCNAME(): unable to create package dir '$pkg_register_dir'" 1>&2
    return 1
  fi

  tar --no-same-owner -zxf "$file" -C "$tmp_pkg_dir" ./setup/
  if [ $? -ne 0 ]; then
    echo "$FUNCNAME(): unable to extract package setup files for package '$package-$version'" 1>&2
    return 1
  fi

  local pre_install_script="$tmp_pkg_dir/setup/pre-install"
  local post_install_script="$tmp_pkg_dir/setup/post-install"
  if [ -f "$pre_install_script" -a -x "$pre_install_script" ]; then
    "$pre_install_script" "$package" "$version" "$system_dir"
  fi

  tar --no-same-owner -zxf "$file" -C "$system_dir" --strip-components 2 ./pkg-files/
  if [ $? -ne 0 ]; then
    echo "$FUNCNAME(): unable to extract package files" 1>&2
    return 1
  fi

  if [ -f "$post_install_script" -a -x "$post_install_script" ]; then
    "$post_install_script" "$package" "$version" "$system_dir"
  fi

  devpanel_update_pkg_link_version "$package" "$version" "$system_dir"
  if [ $? -ne 0 ]; then
    return 1
  fi

  return 0
}

devpanel_update_pkg() {
  local package="$1"
  local version="$2"
  local file="$3"
  local system_dir="$4"

  local tmp_pkg_dir=`dirname "$file"`/"$package-$version"
  if ! mkdir "$tmp_pkg_dir" ; then
    echo "$FUNCNAME(): unable to create temp dir '$tmp_pkg_dir'" 1>&2
    return 1
  fi

  tar --no-same-owner -zxf "$file" -C "$tmp_pkg_dir" ./setup/
  if [ $? -ne 0 ]; then
    echo "$FUNCNAME(): unable to extract package file" 1>&2
    return 1
  fi

  local pre_update_script="$tmp_pkg_dir/setup/pre-update"
  local post_update_script="$tmp_pkg_dir/setup/post-update"
  if [ -f "$pre_update_script" -a -x "$pre_update_script" ]; then
    "$pre_update_script" "$package" "$version" "$system_dir"
  fi

  tar --no-same-owner -zxf "$file" -C "$system_dir" --strip-components 2 ./pkg-files/
  if [ $? -ne 0 ]; then
    echo "$FUNCNAME(): unable to extract package files" 1>&2
    return 1
  fi

  if [ -f "$post_update_script" -a -x "$post_update_script" ]; then
    "$post_update_script" "$package" "$version" "$system_dir"
  fi

  devpanel_update_pkg_link_version "$package" "$version" "$system_dir"
  if [ $? -ne 0 ]; then
    return 1
  fi

  return 0
}

devpanel_update_versioned_pkg_version() {
  local package="$1"
  local version="$2"
  local pkg_dir="$3"

  local target_dir="$pkg_dir/$package/$version"
  local target_link="$pkg_dir/$package/current"
  local status

  if [ ! -e "$target_dir" ]; then
    echo "$FUNCNAME(): dir '$target_dir' doesn't seem to exist" 1>&2
    return 1
  fi

  if [ ! -L "$target_link" -a -e "$target_link" ]; then
    echo "$FUNCNAME(): path '$target_link' exists but is not a symbolic link" 1>&2
    return 1
  elif [ -L "$target_link" ]; then
    rm -f "$target_link"
  fi

  ln -s "$version" "$target_link"
  status=$?
  if [ $status -ne 0 ]; then
    echo "$FUNCNAME(): unable to update target link '$target_link'" 1>&2
  fi

  return $status
}

devpanel_update_pkg_link_version() {
  local package="$1"
  local version="$2"
  local system_dir="$3"

  local target_link="$system_dir/config/packages/$package/version"

  if [ ! -L "$target_link" -a -e "$target_link" ]; then
    echo "$FUNCNAME(): path '$target_link' exists but is not a symbolic link" 1>&2
    return 1
  elif [ -L "$target_link" ]; then
    rm -f "$target_link"
  fi

  ln -s "$version" "$target_link"
  local status=$?
  if [ $status -ne 0 ]; then
    echo "$FUNCNAME(): unable to update target link '$target_link'" 1>&2
  fi

  return $status
}

calc_md5_str() {
  local str="$1"
  local md5_str=""

  if [[ "$OSTYPE" =~ ^darwin ]]; then
    md5_str=`echo -n "$str" | /sbin/md5`
  else
    md5_str=`echo -n "$str" | md5sum`
  fi

  if [ $? -ne 0 ]; then
    echo "$FUNCNAME(): unable to get md5sum of string" 1>&2
    return 1
  fi

  if [[ "$OSTYPE" =~ ^darwin ]]; then
    md5_str=${md5_str##* }
  else
    md5_str=${md5_str%% *}
  fi

  echo -n "$md5_str"

  return 0
}

devpanel_get_os_version() {
  if ! hash lsb_release &>/dev/null; then
    echo "$FUNCNAME(): error - didn't find lsb_release in PATH" 1>&2
    return 1
  fi

  local version=""
  version=`lsb_release -r 2>/dev/null | egrep -o '[0-9\.]+$'`
  if [ -z "$version" ]; then
    echo "$FUNCNAME(): error, unable to get OS version" 1>&2
    return 1
  fi

  echo -n "$version"
}

devpanel_get_os_version_major() {
  if ! hash lsb_release &>/dev/null; then
    echo "$FUNCNAME(): error - didn't find lsb_release in PATH" 1>&2
    return 1
  fi

  local version="" major=""
  version=`lsb_release -r 2>/dev/null | egrep -o '[0-9\.]+$'`
  if [ -z "$version" ]; then
    echo "$FUNCNAME(): error, unable to get OS version" 1>&2
    return 1
  fi

  major=${version%%.*}

  echo -n "$major"
}

devpanel_get_os_version_minor() {
  if ! hash lsb_release &>/dev/null; then
    echo "$FUNCNAME(): error - didn't find lsb_release in PATH" 1>&2
    return 1
  fi

  local version="" minor=""
  version=`lsb_release -r 2>/dev/null | egrep -o '[0-9\.]+$'`
  if [ -z "$version" ]; then
    echo "$FUNCNAME(): error, unable to get OS version" 1>&2
    return 1
  fi

  minor=${version%*.}

  echo -n "$minor"
}

deref_contents() {
  local path="$1"

  local value=""

  if [ -L "$path" ]; then
    value=`readlink "$path"`
  elif [ -f "$path" ]; then
    value=`cat "$path"`
  elif [ ! -e "$path" ]; then
    echo "$FUNCNAME(): path doesn't exist $path" 1>&2
    return 1
  else
    echo "$FUNCNAME(): don't know how to de-reference path $path" 1>&2
    return 1
  fi

  echo -n "$value"
}

deref_contents_or_exit() {
  local path="$1"

  deref_contents "$path"
  if [ $? -eq 0 ]; then
    return 0
  else
    echo "Error: unable to de-reference path '$path'" 1>&2
    exit 1
  fi
}

assign_deref_contents_or_exit() {
  local var="$1"
  local path="$2"
  local value=""

  value=`deref_contents "$path"`
  if [ $? -ne 0 -o -z "$value" ]; then
    echo "Error: unable to de-reference path '$path'" 1>&2
    exit 1
  else
    eval $var="$value"
    return $?
  fi
}


deref_os_prop() {
  local base_dir="$1"
  local key_name="$2"

  local os_name="" os_version="" os_major=""
  local base_path="" key_path="" v="" resolved="" local_value=""
  local ver_specific="" ver_major="" os_specific="" devpanel_specific=""

  os_version=`devpanel_get_os_version`
  [ $? -ne 0 ] && return 1

  os_major=`devpanel_get_os_version_major`
  [ $? -ne 0 ] && return 1

  base_path="$base_dir/config/os"

  ver_specific="$base_path/$os_version/$key_name"
  ver_major="$base_path/$os_major/$key_name"
  os_specific="$base_path/$key_name"
  local_value="$base_dir/config/key_value/local/$key_name"
  devpanel_specific="$base_dir/config/key_value/$key_name"

  # check in this order:
  #   config/key_value/local/ -> local custom value
  #   os/<specific_version>   -> for the specific version
  #   os/<os_major>           -> for the specific major version
  #   os/                     -> for the specific distro
  #   config/key_value/       -> generic devPanel convention

  for v in "$local_value" "$ver_specific" "$ver_major" \
           "$os_specific" "$devpanel_specific"; do

    if [ -L "$v" -o -f "$v" ]; then
      key_path="$v"
      break
    fi
  done

  if [ -z "$key_path" ]; then
    echo "$FUNCNAME(): unable to find key $key_name in $base_dir" 1>&2
    return 1
  fi

  deref_contents "$key_path" || return 1
}

deref_os_prop_or_exit() {
  local base_dir="$1"
  local key_name="$2"

  deref_os_prop "$base_dir" "$key_name"
  [ $? -ne 0 ] && exit 1
}

assign_deref_os_prop_or_exit() {
  local var="$1"
  local base_dir="$2"
  local key_name="$3"

  local value=""

  value=`deref_os_prop "$base_dir" "$key_name"`
  if [ $? -ne 0 -o -z "$value" ]; then
    echo "Error: unable to de-reference key '$key_name'" 1>&2
    exit 1
  else
    eval $var="$value"
    return $?
  fi
}

deref_os_fs_path() {
  local base_dir="$1"
  local key_name="$2"

  local orig_value="" value="" value_norm="" key_dir=""

  orig_value=`deref_os_prop "$base_dir" "$key_name"`
  [ $? -ne 0 -o -z "$orig_value" ] && return 1

  if [ "${orig_value:0:1}" != "/" ]; then
    key_dir=`dirname "$base_dir/config/os/$key_name"`
    value="$key_dir/$orig_value"
  else
    value="$orig_value"
  fi
  
  # existence of the target path not required
  value_norm=`readlink -m "$value"`

  echo -n "$value_norm"
}

deref_os_fs_path_ex() {
  # the different from deref_os_fs_path() is that this _ex() function
  # requires the file existence
  local base_dir="$1"
  local key_name="$2"

  local orig_value="" value="" value_norm="" key_dir=""

  orig_value=`deref_os_prop "$base_dir" "$key_name"`
  [ $? -ne 0 -o -z "$orig_value" ] && return 1

  if [ "${orig_value:0:1}" != "/" ]; then
    key_dir=`dirname "$base_dir/config/os/$key_name"`
    value="$key_dir/$orig_value"
  else
    value="$orig_value"
  fi

  # requires the existence of the target path
  value_norm=`readlink -e "$value"`
  [ $? -ne 0 ] && return 1

  echo -n "$value_norm"
}


deref_os_fs_path_or_exit() {
  local base_dir="$1"
  local key_name="$2"

  deref_os_fs_path "$base_dir" "$key_name"
  [ $? -ne 0 ] && exit 1
}

deref_os_fs_path_ex_or_exit() {
  local base_dir="$1"
  local key_name="$2"

  deref_os_fs_path_ex "$base_dir" "$key_name"
  [ $? -ne 0 ] && exit 1
}

assign_deref_os_fs_path_ex_or_exit() {
  local var="$1"
  local base_dir="$2"
  local key_name="$3"

  local value=""

  value=`deref_os_fs_path_ex "$base_dir" "$key_name"`
  if [ $? -eq 0 -a -n "$value" ]; then
    eval $var="$value"
    return $?
  else
    echo "Error: unable to dereference path: $key_name" 1>&2
    exit 1
  fi
}

lock_path() {
  local path="$1"
  local sleep_n="${2:-0.1}"
  local -i max_retries="${3:-100}"

  local lock_file=""

  if [ ! -L "$path" -a ! -e "$path" ]; then
    wedp_warn "path '$path' doesn't exist"
    return 1
  else
    lock_file="`dirname "$path"`/.`basename "$path"`.lock"
  fi

  local -i retries=1
  while [ $retries -le $max_retries ]; do
    ln -s "pid:$PPID" "$lock_file" 2>/dev/null
    if [ $? -eq 0 ]; then
      printf '%s' "$lock_file"
      return 0
    else
      sleep $sleep_n
    fi
    retries+=1
  done

  wedp_warn "unable to lock path '$path', timed out"
  return 1 # failed
}

unlock_path() {
  local path="$1"
  
  local lock_file=""

  if [ ! -L "$path" -a ! -e "$path" ]; then
    wedp_warn "path '$path' doesn't exist"
    return 1
  else
    lock_file="`dirname "$path"`/.`basename "$path"`.lock"
  fi

  if [ ! -L "$lock_file" -a ! -e "$lock_file" ]; then
    wedp_warn "didn't find lock file '$lock_file'"
    return 0
  elif [ ! -L "$lock_file" ]; then
    echo "$FUNCNAME(): path '$lock_file' is not a symlink" 1>&2
    return 1
  fi

  rm -f "$lock_file"
}

rm_rf_safer() {
  local dir="$1"

  if [ -z "$dir" -o ! -d "$dir" ]; then
    return 1
  fi

  local dir_full_path=`readlink -e "$dir"`
  if [ $? -ne 0 -o -z "$dir_full_path" ]; then
    echo "$FUNCNAME(): unable to determine full path of '$dir'" 1>&2
    return 1
  fi

  if [ "$dir_full_path" == "/" ]; then
    echo "$FUNCNAME(): can't use dir as /" 1>&2
    return 1
  fi

  rm -rf "$dir_full_path"
}

get_metadata_value() {
  local dir="$1"
  local key="`basename "$2"`"

  local user_def_path="$dir/local/$key"
  local usual_path="$dir/$key"
  local link_path="" link_value=""

  if [ -L "$user_def_path" ]; then
    link_path="$user_def_path"
  elif [ -L "$usual_path" ]; then
    link_path="$usual_path"
  else
    echo "$FUNCNAME(): didn't find key '$2'" 1>&2
    return 1
  fi

  link_value="`readlink "$link_path"`"
  if [ $? -eq 0 ]; then
    echo "$link_value"
    return 0
  else
    echo "$FUNCNAME(): found, but couldn't read link value on '$link_path'" 1>&2
    return 1
  fi
}

get_apache_metadata_value() {
  local system_dir="$1"
  local key="$2"

  local apache_config_dir="$system_dir/config/vhosts"

  local vhost_conf_dir="$apache_config_dir/${USER#w_}"

  if [ ! -d "$vhost_conf_dir" ]; then
    echo "$FUNCNAME(): missing vhost conf dir $vhost_conf_dir" 1>&2
    return 1
  fi

  get_metadata_value "$vhost_conf_dir" "$key"
}

date_placeholders() {
  local template_str="$1"
  local ref_date="${2:-now}"

  if [ -n "$ref_date" ] && ! [[ "$ref_date" =~ ^[A-Za-z0-9\ -]+$ ]]; then
    echo "$FUNCNAME(): invalid ref_date" 1>&2
    return 1
  fi

  local fmt_str='+%d %b %m %Y %H %M'

  local day month monthn year hour minute

  IFS=" " read day month monthn year hour minute \
    <<< $(date -d "$ref_date" "$fmt_str")

  local date_str

  date_str="$template_str"
  date_str=${date_str//@day@/"$day"}
  date_str=${date_str//@month@/"$month"}
  date_str=${date_str//@monthn@/"$monthn"}
  date_str=${date_str//@year@/"$year"}
  date_str=${date_str//@hour@/"$hour"}
  date_str=${date_str//@minute@/"$minute"}

  printf '%s' "$date_str"
}

get_mysql_version() {
  if ! hash mysql &>/dev/null; then
    echo "$FUNCNAME(): missing mysql command" 1>&2
    return 1
  fi

  local tmp_str
  tmp_str=$(mysql -V 2>/dev/null | egrep -o 'Distrib [0-9]\.[0-9]+(\.[0-9]+)?')
  if [ $? -ne 0 -o -z "$tmp_str" ]; then
    echo "$FUNCNAME(): unable to get mysql version from mysql command" 1>&2
    return 1
  fi

  local junk version_str
  IFS=" " read junk version_str <<< "$tmp_str"

  echo -n "$version_str"
}

get_php_version() {
  if hash php-config &>/dev/null; then
    php-config --version
    return $?
  elif hash php &>/dev/null; then
    local tmp_str=$(php -v | egrep -o 'PHP [0-9]\.[0-9]+\.[0-9]+')
    if [ $? -ne 0 -o -z "$tmp_str" ]; then
      echo "$FUNCNAME(): unable to get version string from php command" 1>&2
      return 1
    fi
    local junk ver_str 
    IFS=" " read junk ver_str <<< "$tmp_str"

    echo -n "$ver_str"
    return 0
  fi

  echo "$FUNCNAME(): php doesn't seem to be installed" 1>&2
  return 1
}

run_verbose() {
    echo "Running command: $@"
    "$@"
}

is_valid_mysql_db_or_table_name() {
  local str="$1"

  [ -z "$str" ] && return 1

  if [[ "$str" =~ ^[A-Za-z0-9_]+$ ]]; then
    return 0
  else
    return 1
  fi
}

is_mysql_engine_supported() {
  local engine="$1"

  local sql_tmpl='SELECT * FROM ENGINES WHERE ENGINE = "%s" 
                  AND SUPPORT IN("YES", "DEFAULT");'

  sql_line=$(printf "$sql_tmpl" "$engine")

  local output=""
  output=$(mysql -BN -D information_schema -e "$sql_line")
  if [ $? -ne 0 ]; then
    return 1
  fi

  if [ -n "$output" ]; then
    return 0
  else
    return 1
  fi
}

escape_quotes() {
  local orig="$1"
  local new="$orig"

  new=${new//\\/\\\\}
  new=${new//\'/\\\'}
  new=${new//\"/\\\"}

  printf '%s' "$new"
}

