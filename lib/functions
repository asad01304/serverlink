#!/bin/bash

error() {
  local msg="$1"
  local exit_code="${2:-1}"

  [ -n "$msg" ] && echo "Error: $msg" 1>&2
  exit $exit_code
}

wedp_warn() {
  local msg="$1"

  echo "Warning: $msg" 1>&2
}

devpanel_auto_detect_distro() {
  local distro=""

  if hash rpm &>/dev/null && rpm -ql centos-release &>/dev/null; then
    distro=centos
  elif hash rpm &>/dev/null && rpm -ql redhat-release-server &>/dev/null; then
    distro=redhat
  elif hash rpm &>/dev/null && rpm -ql owl-hier >/dev/null 2>&1; then
    distro=owl
  elif hash lsb_release &>/dev/null && [ "`lsb_release -si 2>/dev/null`" == "Debian" ]; then
    distro=debian
  elif hash lsb_release &>/dev/null && [ "`lsb_release -si 2>/dev/null`" == "Ubuntu" ]; then
    distro=ubuntu
  fi

  if [ -n "$distro" ]; then
    echo $distro
    return 0
  else
    return 1
  fi
}

wedp_auto_detect_distro() {
  local distro=""

  if grep -qis centos /etc/redhat-release; then
    distro=centos
  elif grep -qis "Red Hat Enterprise Linux" /etc/redhat-release; then
    distro=redhat
  elif grep -qis fedora /etc/redhat-release; then
    distro=fedora
  elif rpm -ql owl-hier >/dev/null 2>&1; then
    distro=owl
  elif lsb_release -a 2>/dev/null | egrep -q "^Distributor ID:[[:space:]]+Debian" || \
    [ -r /etc/debian_version ] && apt-cache show lsb-base | egrep -q '^Maintainer: .+debian\.org>'; then
    distro=debian
  elif lsb_release -a 2>/dev/null | egrep -q "^Distributor ID:[[:space:]]+Ubuntu" || \
    [ -r /etc/debian_version ] && apt-cache show lsb-base | egrep -q '^Maintainer: .+ubuntu\.com>'; then
    distro=ubuntu
  elif [ -r /etc/gentoo-release ]; then
    distro=gentoo
  fi

  if [ -n "$distro" ]; then
    echo $distro
    return 0
  else
    return 1
  fi
}

wedp_auto_detect_distro_version() {
  local distro="$1"
  local version_str="" version=""

  if [ "$distro" == "centos" ]; then
    version_str=$(head -1 "/etc/redhat-release")
    if [[ "$version_str" =~ CentOS\ release\ ([0-9]+\.[0-9]+) ]]; then
      version="${BASH_REMATCH[1]}"
    fi
  else
    version="0"
  fi

  if [ -n "$version" ]; then
    echo $version
    return 0
  else
    return 1
  fi
}

print_quoted_variables() {
  local line=""
  local var=""

  for var in "$@"; do
    line=$(declare -p $var)
    line=${line#declare -x}
    echo $line
  done
}

escape_sed() {
  local str="$1"
  local escaped="$str"

  escaped=${escaped//\'/\\\'}
  escaped=${escaped//\*/\\*}
  escaped=${escaped//\;/\\;}
  escaped=${escaped//\[/\\[}
  escaped=${escaped//\]/\\]}
  escaped=${escaped//\\+/+\]}
  escaped=${escaped//\\\?/\?}
  escaped=${escaped//\\\(/\(}
  escaped=${escaped//\\\)/\)}
  escaped=${escaped//\//\\/}

  echo -n "$escaped"
}

# the function below is a candidate to be removed as it's much better to use
# variable ${BASH_SOURCE[0]}, though not removing it now because not sure if
# it's being used by other scripts
resolve_local_dir() {
  local base="$1"
  local bin=""
  local bin_path=""
  local dir_name=""

  [ ${#base} -eq 0 ] && return 1

  if [ ${base:0:1} == "/" ]; then
    echo $(dirname "$base")
    return 0
  elif [ ${#base} -gt 2 -a ${base:0:2} == "./" ]; then
    base=${base#./}
    dir_name=$(dirname "$base")
    if [ "$dir_name" == "." ]; then
      echo "$PWD"
    else
      echo "$PWD/$dir_name"
    fi 
    return 0
  elif [ ${#base} -gt 2 -a ${base:0:3} == "../" ]; then
    echo $(dirname "$PWD/$base")
  else
    return 1
  fi 
}

wedp_resolve_link() {
  local source="$1"
  local target=""

  [ -z "$source" ] && return 1

  target=$(readlink -m "$source")
  if [ $? -eq 0 ]; then
    echo "$target"
    return 0
  else
    return 1
  fi
}

wedp_gen_random_str() {
  local length=${1:-40}

  local str=$(head -c $(( $length * 30 )) /dev/urandom | tr -dc 'A-Za-z0-9')

  if [ ${#str} -lt $length ]; then
    return 1
  else
    echo "${str:0:$length}"
    return 0
  fi
}

download_file() {
  local url="$1"
  local temp_file="$2"
  local retries=${3:-3}
  local wait_before_retry=${4:-20}

  if hash curl &>/dev/null; then
    curl -L -f --retry $retries --retry-delay $wait_before_retry -s -o "$temp_file" "$url"
    status=$?
  elif hash wget &>/dev/null; then
    wget -t $retries -w $wait_before_retry -nv -O "$temp_file" "$url"
    status=$?
  fi

  return $status
}

ini_section_get_key_value() {
  local file="$1"
  local section=`escape_sed "$2"`
  local key=`escape_sed "$3"`

  sed -n -e "/^\[$section\]/,/^\[/ {
    /^\($key\)[[:space:]]*=.*$/ { s/^$key[[:space:]]*=[[:space:]]*//; p; q 0; }
  } ; $ q 1;" "$file"
}

ini_section_replace_key_value() {
  local file="$1"
  local section=`escape_sed "$2"`
  local key=`escape_sed "$3"`
  local value=`escape_sed "$4"`

  local orig_md5=`md5sum "$file"`
  orig_md5=${orig_md5%% *}

  sed -i -e "/^\[$section\]/,/^\[/ {
    /^\($key\)[[:space:]]*=.*$/ {
      s/^\($key\)[[:space:]]*=.*$/\1 = $value/g;
    }
  }" "$file"

  local status=$?
  [ $status -ne 0 ] && return $status

  local final_md5=`md5sum "$file"`
  final_md5=${final_md5%% *}

  if [ "$orig_md5" != "$final_md5" ]; then
    return 0 # file changed, success!
  else
    return 1 # file is the same, replace failed
  fi
}

ini_section_add_key_value() {
  local file="$1"
  local section=`escape_sed "$2"`
  local key=`escape_sed "$3"`
  local value=`escape_sed "$4"`

  local orig_md5=`md5sum "$file"`
  orig_md5=${orig_md5%% *}

  sed -i -e "/^\[$section\]/ {
    a \
$key = $value
}" "$file"

  local final_md5=`md5sum "$file"`
  final_md5=${final_md5%% *}

  if [ "$orig_md5" != "$final_md5" ]; then
    return 0 # file changed, success!
  else
    return 1 # file is the same, add failed
  fi
}

get_sshkey_fingerprint() {
  local key_text="$1"
  local tmp_file
  local key_line

  tmp_file=`mktemp`
  if [ $? -ne 0 ]; then
    echo "${FUNCNAME[0]}(): could not create temporary file to store the key" 1>&2
    return 1
  fi

  echo "$key_text" >"$tmp_file"
  if [ $? -ne 0 ]; then
    echo "${FUNCNAME[0]}(): could not store the key contents into tmpfile '$tmp_file'" 1>&2
    rm -f "$tmp_file"
    return 1
  fi

  key_line=`ssh-keygen -f "$tmp_file" -l`
  if [ $? -ne 0 ]; then
    echo "${FUNCNAME[0]}(): uname to calculate key fingerprint" 1>&2
    rm -f "$tmp_file"
    return 1
  fi

  rm -f "$tmp_file"

  local key_size key_fingerprint key_input_text
  IFS=" " read key_size fingerprint key_input_text <<< "$key_line"
  if [ -z "$fingerprint" ]; then
    echo "${FUNCNAME[0]}(): got an empty fingerprint" 1>&2
    return 1
  fi

  echo "$fingerprint"
  return 0
}

is_sshkey_in_keyfile() {
  local desired_fp="$1"
  local key_file="$2"
  local fp_list
  local key_line key_mod_size key_fp key_txt

  if ! fp_list=`ssh-keygen -f "$key_file" -l`; then
    echo "${FUNCNAME[0]}(): could not get the list of fingerprints" 1>&2
    return 1
  fi

  while read key_line; do
    IFS=" " read key_size key_fp key_txt <<< "$key_line"
    if [ "$key_fp" == "$desired_fp" ]; then
      return 0
    fi
  done <<< "$fp_list"

  return 1
}

devpanel_download_pkg() {
  local package="$1"
  local version="$2"
  local base_url="$3"
  local tmp_dir="${4:-/tmp}"

  local pkg_url="$base_url/$pkg_n_version.tar.gz"

  local tmp_pkg_dir="$tmp_dir/pkgs"
  if [ ! -d "$tmp_pkg_dir" ] && ! mkdir -m 700 "$tmp_pkg_dir"; then
    echo "$FUNCNAME(): unable to create temp dir '$tmp_pkg_dir'" 1>&2
    return 1
  fi

  if ! download_file "$pkg_url" "$tmp_file"; then
    echo "$FUNCNAME(): unable to download package '$package'" 1>&2
    return 1
  fi
}

devpanel_install_pkg() {
  local package="$1"
  local version="$2"
  local file="$3"
  local system_dir="$4"

  local tmp_pkg_dir=`dirname "$file"`/"$package-$version"
  if ! mkdir "$tmp_pkg_dir" ; then
    echo "$FUNCNAME(): unable to create temp dir '$tmp_pkg_dir'" 1>&2
    return 1
  fi

  local pkg_register_dir="$system_dir/config/packages/$package"
  if [ ! -d "$pkg_register_dir" ] && ! mkdir "$pkg_register_dir"; then
    echo "$FUNCNAME(): unable to create package dir '$pkg_register_dir'" 1>&2
    return 1
  fi

  tar --no-same-owner -zxf "$file" -C "$tmp_pkg_dir" ./setup/
  if [ $? -ne 0 ]; then
    echo "$FUNCNAME(): unable to extract package setup files for package '$package-$version'" 1>&2
    return 1
  fi

  local pre_install_script="$tmp_pkg_dir/setup/pre-install"
  local post_install_script="$tmp_pkg_dir/setup/post-install"
  if [ -f "$pre_install_script" -a -x "$pre_install_script" ]; then
    "$pre_install_script" "$package" "$version" "$system_dir"
  fi

  tar --no-same-owner -zxf "$file" -C "$system_dir" --strip-components 2 ./pkg-files/
  if [ $? -ne 0 ]; then
    echo "$FUNCNAME(): unable to extract package files" 1>&2
    return 1
  fi

  if [ -f "$post_install_script" -a -x "$post_install_script" ]; then
    "$post_install_script" "$package" "$version" "$system_dir"
  fi

  devpanel_update_pkg_link_version "$package" "$version" "$system_dir"
  if [ $? -ne 0 ]; then
    return 1
  fi

  return 0
}

devpanel_update_pkg() {
  local package="$1"
  local version="$2"
  local file="$3"
  local system_dir="$4"

  local tmp_pkg_dir=`dirname "$file"`/"$package-$version"
  if ! mkdir "$tmp_pkg_dir" ; then
    echo "$FUNCNAME(): unable to create temp dir '$tmp_pkg_dir'" 1>&2
    return 1
  fi

  tar --no-same-owner -zxf "$file" -C "$tmp_pkg_dir" ./setup/
  if [ $? -ne 0 ]; then
    echo "$FUNCNAME(): unable to extract package file" 1>&2
    return 1
  fi

  local pre_update_script="$tmp_pkg_dir/setup/pre-update"
  local post_update_script="$tmp_pkg_dir/setup/post-update"
  if [ -f "$pre_update_script" -a -x "$pre_update_script" ]; then
    "$pre_update_script" "$package" "$version" "$system_dir"
  fi

  tar --no-same-owner -zxf "$file" -C "$system_dir" --strip-components 2 ./pkg-files/
  if [ $? -ne 0 ]; then
    echo "$FUNCNAME(): unable to extract package files" 1>&2
    return 1
  fi

  if [ -f "$post_update_script" -a -x "$post_update_script" ]; then
    "$post_update_script" "$package" "$version" "$system_dir"
  fi

  devpanel_update_pkg_link_version "$package" "$version" "$system_dir"
  if [ $? -ne 0 ]; then
    return 1
  fi

  return 0
}

devpanel_update_versioned_pkg_version() {
  local package="$1"
  local version="$2"
  local pkg_dir="$3"

  local target_dir="$pkg_dir/$package/$version"
  local target_link="$pkg_dir/$package/current"
  local status

  if [ ! -e "$target_dir" ]; then
    echo "$FUNCNAME(): dir '$target_dir' doesn't seem to exist" 1>&2
    return 1
  fi

  if [ ! -L "$target_link" -a -e "$target_link" ]; then
    echo "$FUNCNAME(): path '$target_link' exists but is not a symbolic link" 1>&2
    return 1
  elif [ -L "$target_link" ]; then
    rm -f "$target_link"
  fi

  ln -s "$version" "$target_link"
  status=$?
  if [ $status -ne 0 ]; then
    echo "$FUNCNAME(): unable to update target link '$target_link'" 1>&2
  fi

  return $status
}

devpanel_update_pkg_link_version() {
  local package="$1"
  local version="$2"
  local system_dir="$3"

  local target_link="$system_dir/config/packages/$package/version"

  if [ ! -L "$target_link" -a -e "$target_link" ]; then
    echo "$FUNCNAME(): path '$target_link' exists but is not a symbolic link" 1>&2
    return 1
  elif [ -L "$target_link" ]; then
    rm -f "$target_link"
  fi

  ln -s "$version" "$target_link"
  local status=$?
  if [ $status -ne 0 ]; then
    echo "$FUNCNAME(): unable to update target link '$target_link'" 1>&2
  fi

  return $status
}
