#!/bin/bash

progname="$(basename $0)"
VMAIL_HOME=/home/clients/mail
VIRTWWW_LOGDIR=/var/log/httpd/vmailwww
VMAILWWW_CFGDIR=/opt/apache/config/conf/vmailwww
VCHKPW_GROUP=vchkpw

function usage() {
    cat << EOF
Usage: $progname [account_name_base] [domain.tld[,alias1[,...]]

the length of account_name_base must not exceed 6 chars, since it'll prepended
by "m_" prefix.

Examples:

# $progname domain domain.tld
This will create virtual mail domain domain.tld, associates mail.domain.tld
with web interface to accessing web-mail and mail domain administraton tool.
Mail domain will be owned by "m_domain" system account.

# $progname
Interactive run.
EOF
    exit 1
}

function check_domain_name() {
    local DOMAIN_NAMES IFS
    DOMAIN_NAMES="$*"
    IFS=', '
    for name in $DOMAIN_NAMES ; do
        result=$(echo "$name" | tr -d '[:alnum:].')
        if [ -n "$result" ]; then
            echo "check_domain_name: '$name' contains invalid characters '$result'"
            return 1
        fi
    done
    return 0
}

function check_account_name() {
    local ACCOUNT_NAME
    if [ $# -ne 1 ]; then
        echo 'check_account_name: wrong number of arguments'
        return 1
    fi
    ACCOUNT_NAME="$1"
    if [ ${#ACCOUNT_NAME} -gt 6 ]; then
        echo 'check_account_name: account name too long (more than 6 chars)'
        return 1
    fi
    return 0
}

function check_url() {
    local URL
    if [ $# -ne 1 ]; then
        echo 'check_url: wrong number of arguments'
        return 1
    fi
    URL=$(echo -n "$1" | grep -E '^https?://([[:alnum:]]+\.)+[[:alpha:]]+(:[[:digit:]]{1,5})*(/[[:alnum:]\.\?\&=%-]*)*$')
    if [ -z "$URL" ]; then
        echo "check_url: provided URL failed validity check"
        return 1
    fi
    return 0
}

[ $# -gt 2 -o "$1" == '--help' ] && usage
ACCOUNT_NAME="$1"
DOMAIN_NAMES="$2"

if [ -z "$DOMAIN_NAMES" ]; then
    echo 'Please enter mail domain name(s) [use comma to separate, empty = quit]'
    while :; do
        read -e -p '>' DOMAIN_NAMES
        if [ -z "$DOMAIN_NAMES" ]; then
            echo 'Aborted creation of new virtual mail domain'
            exit 1
        fi
        check_domain_name "$DOMAIN_NAMES"
        case "$?" in
            0)
                break
                ;;
            *)
                echo 'Invalid domain name(s) specified, please try again'
                ;;
        esac
    done
else
    if ! check_domain_name "$DOMAIN_NAMES"; then
        echo 'Invalid domain name(s) specified, aborting'
        exit 1
    fi
fi

if [ -z "$ACCOUNT_NAME" ]; then
    echo 'Please enter basename for system account [empty = quit]'
    while :; do
        read -e -p '>' ACCOUNT_NAME
        if [ -z "$ACCOUNT_NAME" ]; then
            echo 'Aborted creation of new virtual host'
            exit 1
        fi
        check_account_name "$ACCOUNT_NAME"
        case "$?" in
            0)
                break
                ;;
            *)
                echo 'Invalid account basename specified, please try again'
                ;;
        esac
    done
else
    if ! check_account_name "$ACCOUNT_NAME"; then
        echo 'Invalid account basename specified, aborting'
        exit 1
    fi
fi

# ===

echo '---'
echo 'Virtual mail domain settings:'
{
    count=0
    IFS=', '
    for domain in $DOMAIN_NAMES ; do
        if [ "$count" -eq 0 ]; then
            echo -n 'Virtual server: '
        else
            echo -n "Alias #$count: "
        fi
        echo "$domain"
        count=$(($count+1))
    done
}
echo "System account for virtual mail domain: m_$ACCOUNT_NAME"
echo
echo 'Virtual mail domain web interface settings:'
{
    count=0
    IFS=', '
    for domain in $DOMAIN_NAMES ; do
        if [ "$count" -eq 0 ]; then
            echo -n 'Virtual server: '
        else
            echo -n "ServerAlias #$count: "
        fi
        echo "webmail.$domain"
        count=$(($count+1))
    done
}
echo '---'

echo -n 'Do you want to create specified virtual mail domain (y/N)? '
read ANSWER
if [ "$ANSWER" != 'y' -a "$ANSWER" != 'Y' ]; then
    echo 'Aborting'
    exit 1
fi

echo '---[ creating new virtual mail domain ]---'

echo -n "+ checking for 'm_$ACCOUNT_NAME' group ... "
if grep -E "^m_$ACCOUNT_NAME:" /etc/group &>/dev/null; then
    echo 'found'
else
    echo 'not found'
    echo -n "+ creating 'm_$ACCOUNT_NAME' group ... "
    if ! groupadd "m_$ACCOUNT_NAME" ; then
        echo
        echo 'Aborting'
        exit 2
    fi
    echo 'done'
fi

echo -n "+ checking for 'm_$ACCOUNT_NAME' account ... "
if [ x$(id -un "m_$ACCOUNT_NAME" 2>/dev/null) == "xm_$ACCOUNT_NAME" ]; then
    echo 'found'
    echo -n "+ checking primary group of 'm_$ACCOUNT_NAME' account ... "
    if [ x$(id -gn "m_$ACCOUNT_NAME" 2>/dev/null) != "xm_$ACCOUNT_NAME" ]; then
        echo 'failed'
        echo
        echo "Error: although 'm_$ACCOUNT_NAME' account exists, it's primary group isn't 'm_$ACCOUNT_NAME'"
        echo 'Aborting'
        exit 2
    fi
    echo 'ok, the same as account name'
else
    echo 'not found'
    echo -n "+ creating 'm_$ACCOUNT_NAME' account ... "
    if ! useradd -g "m_$ACCOUNT_NAME"  -m -d "$VMAIL_HOME/m_$ACCOUNT_NAME" "m_$ACCOUNT_NAME"; then
        echo
        echo 'Aborting'
        exit 2
    fi
    echo 'done'
fi

echo -n '+ preparing postmaster@ password ... '
POSTMASTER_PASSWD=$(passgen2)
if [ -z "$POSTMASTER_PASSWD" -o "${#POSTMASTER_PASSWD}" -lt 8 ]; then
	echo 'failed, you will be prompted.'
else
	echo 'generated'
fi

echo '+ adding virtual mail domains to vpopmail:'
{
    count=0
    failed=0
    master_domain=
    IFS=', '
    for domain in $DOMAIN_NAMES ; do
        echo -n "$domain ... "
        if [ "$count" -eq 0 ]; then
		master_domain="$domain"
		/opt/vpopmail/current/bin/vadddomain -u "m_$ACCOUNT_NAME" "$domain" "$POSTMASTER_PASSWD"
		chmod 0711 "$VMAIL_HOME/m_$ACCOUNT_NAME/$domain"
		chmod 0744 "$VMAIL_HOME/m_$ACCOUNT_NAME/$domain/.qmail-default"
	else

		/opt/vpopmail/current/bin/vaddaliasdomain "$master_domain" "$domain"
	fi
	if [ "$?" -ne 0 ]; then
            failed=$(($failed+1))
        fi
        count=$(($count+1))
	echo
    done
    if [ "$failed" -ne 0 ]; then
        echo "WARNING: at least $failed virtual mail domains weren't added!"
        echo 'WARNING: please review output of this script and add these'
        echo "WARNING: domains manually using 'vadddomain -u m_$ACCOUNT_NAME domain_name'"
        echo "WARNING: or 'vaddaliasdomain master_domain domain_alias' if it's an alias"
    fi
}

echo -n '+ fixing the permissions on the home directory ... '
chgrp -h "$VCHKPW_GROUP" "$VMAIL_HOME/m_$ACCOUNT_NAME"
chmod g+x "$VMAIL_HOME/m_$ACCOUNT_NAME"
echo Done

echo '---[ creating web interface virtual host(s) ]---'

echo -n "+ checking for 'virtwww' group ... "
if grep -E '^virtwww:' /etc/group &>/dev/null; then
    echo 'found'
else
    echo 'not found'
    echo
    echo 'Error: virtwww group is not present, this hosting server is unconfigured!'
    echo 'Aborting'
    exit 2
fi

echo -n '+ adding new virtual host record into httpd config ... '
TMPFILE=$(mktemp "$VMAILWWW_CFGDIR/m_$ACCOUNT_NAME.conf.XXXXXXXXXX") || exit 1
trap 'rm -f -- "$TMPFILE"' EXIT
trap 'trap - EXIT; rm -f -- "$TMPFILE"; exit 1' HUP INT QUIT TERM
echo '<VirtualHost *:80>' > "$TMPFILE"
count=0
IFS=', '
for domain in $DOMAIN_NAMES ; do
    if [ "$count" -eq 0 ]; then
        echo -n '    ServerName ' >> "$TMPFILE"
    else
        echo -n '    ServerAlias ' >> "$TMPFILE"
    fi
    echo "webmail.$domain" >> "$TMPFILE"
    count=$(($count+1))
done

cat << EOF >> "$TMPFILE"
    DocumentRoot $VMAIL_HOME/m_$ACCOUNT_NAME/.webmail/public_html

    SuexecUserGroup m_$ACCOUNT_NAME m_$ACCOUNT_NAME

    CustomLog logs/vmailwww/m_$ACCOUNT_NAME/access_log combined
    ErrorLog logs/vmailwww/m_$ACCOUNT_NAME/error_log

    # include webmail and qmailadmin configurations
    Use WebMail
</VirtualHost>
EOF

if ! ln "$TMPFILE" "$VMAILWWW_CFGDIR/m_$ACCOUNT_NAME.conf" 2>/dev/null ; then
	echo 'failed'
	echo "$0: could not add configuration for 'm_$ACCOUNT_NAME'"
	echo "Please insert the following snippet to '$VMAILWWW_CFGDIR/m_$ACCOUNT_NAME' file:"
	echo '===[ begin ]==='
	cat "$TMPFILE"
	echo '===[  end  ]==='
fi
echo 'done'

echo -n '+ creating the log files directory ... '
mkdir -m750 "$VIRTWWW_LOGDIR/m_$ACCOUNT_NAME"
touch "$VIRTWWW_LOGDIR/m_$ACCOUNT_NAME/"{access,error}_log
chmod 0644 "$VIRTWWW_LOGDIR/m_$ACCOUNT_NAME/"{access,error}_log
chown -h root:m_$ACCOUNT_NAME "$VIRTWWW_LOGDIR/m_$ACCOUNT_NAME"
echo 'done'

echo -n "+ creating .webmail hierarchy in ~m_$ACCOUNT_NAME ... "
if ! su - -c 'mkdir -p ~/.webmail/{attachments,preferences,public_html}' "m_$ACCOUNT_NAME"; then
	echo 'failed'
	echo "$0: could not create the .webmail hierarchy in '~m_$ACCOUNT_NAME'"
	echo "Please create '~m_ACCOUNT_NAME/.webmail/{attachments,preferences,public_html}'"
	echo 'manually. The following Apache integrity check will show a warning about'
	echo "missing DocumentRoot directory for 'webmail.$master_domain'. It's expected."
else
echo 'done'
fi

echo -n '+ checking Apache configuration integrity ... '
RESULT="$(/opt/apache/current/bin/apachectl configtest 2>&1)"
if [ $? -eq 0 ]; then
	echo 'done'
else
	echo 'failed'
	echo -n "$0: $RESULT"
fi

echo -n '+ reloading Apache to get new configuration ... '
RESULT="$(/opt/apache/current/bin/apachectl graceful 2>&1)"
if [ $? -eq 0 ]; then
	echo 'done'
else
    echo 'failed'
    echo -n "$0: $RESULT"
fi

echo -n "+ enabling common CGI for m_$ACCOUNT_NAME ... "
if ! /usr/local/sbin/chcgi "m_$ACCOUNT_NAME" =1 >& /dev/null; then
    echo 'failed'
else
    echo 'done'
fi

echo '---[ end of creating new virtual mail domain ]---'
echo
echo 'To access the newly created services use the following credentials:'
echo
echo "WebMail  : http://webmail.$master_domain/"
echo "MailAdmin: http://webmail.$master_domain/admin"
echo
echo 'account  : postmaster'
echo "password : $POSTMASTER_PASSWD"
echo
echo 'To retrieve mail use the following servers:'
echo
echo "POP3/IMAP: $(hostname -f)"
echo
echo "Use 'login@$master_domain' as a login name for POP3/IMAP authentication."
echo
exit 0

