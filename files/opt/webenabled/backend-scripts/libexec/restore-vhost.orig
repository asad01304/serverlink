#!/bin/bash
# Options:
#   -P replicate w_* user's password
#   -i pass mysql passwd via stdin
#   -n do not activate apache vhost (used for hosting_link)

error()
{
  echo "ERROR${1+: }$@" >&2
  exit 1
}

options=""
opt_i=0

while getopts "Pin" OPTOPT
do
  case "$OPTOPT" in
    P) options="${options+ }-P";;
    i) opt_i=1;;
    n) options="${options+ }-n";;
    *) exit 1;
  esac
done
shift `expr $OPTIND - 1`

dir=`dirname "$0"`
dir_bin="$dir/../bin"
vhost="$1"
user_web="w_$vhost"
home="`eval \"echo ~$user_web\"`" || error
user_db="b_$vhost"
archive_dir="$2"
vhost_config_dir=.webenabled/private
shift
shift
run()
{
  echo "  Running $@"
  "$@"
}
run2()
{
  echo "  Running $@" >&2
  "$@"
}
run_su()
{
  echo "  running su -l -c '$@' $user_web" >&2
  su -l -c "$*" "$user_web"
}

usage()
{
  echo "Usage: restore-vhost VHOST ARCHIVE_LABEL" >&2
  exit 1
}

$dir/check-vhost-name restore "$vhost" || usage

password="";
if [ $opt_i = 1 ]
then
  read -r password || exit 1
  [ -n "$password" ] || exit 1
fi


[ o"$archive_dir" = o"-" ] || error "restore-archive is now only supported from stdin"
TMPDIR=""
TMPDIR=`$dir/archive-mktemp` || exit 1
tar -C "$TMPDIR" -zxpf -  || exit 1
archive_dir="$TMPDIR"

echo Processing web...
run $0-web $options "$vhost" "$archive_dir/web" "$@" || exit 1
if ! [ -d "$archive_dir/db" ]
then
  echo "Skipping db (not present in the archive)"
  exit 0
fi
echo Processing db...
if [ $opt_i = 1 ]
then
  output=`echo "$password" | run $0-db -i "$vhost" "$archive_dir/db" 2>&1`
  status=$?
else
  output=`run $0-db "$vhost" "$archive_dir/db" 2>&1`
  status=$?
fi
echo "$output"
[ $status = 0 ] || exit $status
echo "Updating .mysql.passwd"
run_su "mkdir -p -m 0711 .webenabled" || exit 1
run_su "mkdir -p -m 0711 $vhost_config_dir" || exit 1
output2=`echo "$output"|sed -n 's/^.*user='\''\([^'\'']\{1,\}\)'\'' password='\''\([^'\'']\{1,\}\)'\''.*/\1:\2/p'` || exit 1
echo "$output"|sed -n 's/^.*user='\''\(w_[^'\'']\{1,\}\)'\'' password='\''\([^'\'']\{1,\}\)'\''.*/webenabled_private_mysql_password \1:\2/p' || exit 1
output3=$(echo "$output"|sed -n 's/^.* host='\''\([^:'\'']\{1,\}\):\([0-9]\{1,\}\)'\'' user='\''\(w_[^'\'']\{1,\}\)'\'' password='\''\([^'\'']\{1,\}\)'\''.*/[client]\
host=\1\
port=\2\
user=\3\
password=\4/p') || exit 1
echo "$output2" | run_su "cat >$vhost_config_dir/.mysql.passwd" || exit 1
run_su "ln -snf $vhost_config_dir/.mysql.passwd .mysql.passwd" || exit 1
echo "$output3" | run_su "cat >$home/.my.cnf" || exit 1
run_su $dir_bin/phpMyAdmin.fix -f || exit 1
run_su $dir_bin/vhost-archive.fix -f || exit 1
for subsystem in drupal joomla wordpress magento projectpier mantis scratch omb elgg silverstripe
do
  run_su rm -f $subsystem.passwd $vhost_config_dir/$subsystem.passwd || exit 1
  if grep -q "^$subsystem\$" "$archive_dir/db/databases"
  then
    run_su $dir_bin/restore-vhost-subsystem -I -s "$subsystem" || exit 1
  fi
done

if [ -n "$TMPDIR" ] && [ -d "$TMPDIR" ]
then
  echo "Removing temporary archive $TMPDIR"
  rm -rf "$TMPDIR"
fi
