#!/bin/bash

GIT_USER='git'
GIT_HOST='localhost'
GIT_COMMIT_MSG="automatic import of \\'\${vhost}\\' vhost"
VHOST_PATH_PREFIX='/home/clients/websites/w_'

say()
{
  tty -s || return

  echo $@
}

get_commit_msg()
{
  eval echo "\\\"$GIT_COMMIT_MSG\\\""
}

usage()
{
  cat >&2 <<eou
usage: $(basename $0) <repo> <vhost> [ <user name> [ <user email> ] ]

  <repo>     repo to import the contents to
  <vhost>    vhost to take the contents from

  optional arguments:
    <user name>     user's name to log in Git
    <user email>    user's email to log in Git
                    unless the email is well formatted, it will
                    be taken as part of the name

eou
}

(( $# < 2 )) && usage && exit 1

repo=$1
shift
vhost=$1
shift

if [ ! -d "${VHOST_PATH_PREFIX}${vhost}" ]; then
  echo "vhost '$vhost' doesn't exist" >&2
  exit 1
fi

user_name=$1
shift

while [ -n "$1" ]; do
  [ -n "$user_email" ] && usage && exit 1

  if echo -n $1 | grep -Eiq '^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$'; then
    user_email=$1
  else
    user_name="$user_name $1"
  fi

  shift
done

say "Clonning vhost '$vhost' into repo '$repo'."
say "User Name: $user_name"
say "Email: $user_email"


# from now on exit if any
# of the commands fail
set -o errexit

# create temp dir and chown to git user
tmpdir=$(mktemp -d)
chown $GIT_USER $tmpdir

# clone the repo as git user
su -c "git clone ${GIT_USER}@${GIT_HOST}:${repo} $tmpdir" - $GIT_USER

# set the author name if available
if [ -n "$user_name" ]; then
  export GIT_DIR="$tmpdir/.git"
  git config --local user.name "$user_name"
  git config --local user.email $user_email
  unset GIT_DIR
fi

# copy the contents from vhost
cp -a ${VHOST_PATH_PREFIX}${vhost}/* $tmpdir

# chown to git user
chown -R $GIT_USER $tmpdir

# commit changes and push as git user
su -c "cd $tmpdir &&
       git add . &&
       git commit -m '$(get_commit_msg)' &&
       git push origin master" - $GIT_USER

# clean up temp files
rm -fr $tmpdir
