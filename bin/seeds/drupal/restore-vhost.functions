#!/bin/sh

drupal_get_users()
{
  local version=""

  version=`drupal_detect_version "$database"`
  if [ $? -ne 0 -o -z "$version" ]; then
    error 'unable to detect drupal version'
  fi

  if [ "$version" == 6 -o "$version" == 7 ]; then
    sql_query_result "select name from users where name <> ''"
  elif [ "$version" == 8 ]; then
    sql_query_result "select name from users_field_data where name <> ''"
  fi
}

drupal_genpass()
{
  "$dir/genpass"
}

drupal_encrypt()
{
  local password="$1"
  local version=""

  version=`drupal_detect_version "$database"`
  if [ $? -ne 0 -o -z "$version" ]; then
    error 'unable to detect drupal version'
  fi

  if [ "$version" == 6 ]; then
    echo -n "$password"| md5sum | cut -d' ' -f 1
  else
    echo -n "$password"|"$dir/drupal7-crypt.php"
  fi
}

drupal_set_password()
{ 
  local user="$1" encrypted_password="$2"
  local token salt
  local status

  local version=""

  version=`drupal_detect_version "$database"`
  if [ $? -ne 0 -o -z "$version" ]; then
    error 'unable to detect drupal version'
  fi

  if [ "$version" == 6 -o "$version" == 7 ]; then
    sql_query "update users set pass = '$encrypted_password' where name = '$user';"
  elif [ "$version" == 8 ]; then
    sql_query "update users_field_data set pass = '$encrypted_password' where name = '$user';"
    status=$?

    # with Drupal 8 beta4, just updating the password in the database wasn't
    # enough. It required one more login with the old password before the
    # new password worked. But running cache-rebuild made it apply 
    # immediately (tested, May 2015)
    ( cd "$home/public_html/$vhost" && drush cache-rebuild )

    return $status
  fi
}

drupal_set_email()
{
  local user="$1" email="$2"

  local version=""

  version=`drupal_detect_version "$database"`
  if [ $? -ne 0 -o -z "$version" ]; then
    error 'unable to detect drupal version'
  fi

  if [ "$version" == 6 -o "$version" == 7 ]; then
    sql_query "update users set mail = '$email' where name = '$user';"

    echo "Changing site_mail to admin's email $email"

    email=${email//\'/} # remove ' from e-mail
    sql_query "update variable set value='s:${#email}:\"$email\"' where name='site_mail';"

  elif [ "$version" == 8 ]; then
    sql_query "update users_field_data set mail = '$email' where name = '$user';"
  fi

}

drupal_get_email()
{
  local user="$1"
  local version=""

  version=`drupal_detect_version "$database"`
  if [ $? -ne 0 -o -z "$version" ]; then
    error 'unable to detect drupal version'
  fi

  if [ "$version" == 6 -o "$version" == 7 ]; then
    sql_query_result "select mail from users where name = '$user';"
  elif [ "$version" == 8 ]; then
    sql_query_result "select mail from users_field_data where name = '$user';"
  fi
}

drupal_get_admin_user()
{
  version=`drupal_detect_version "$database"`
  if [ $? -ne 0 -o -z "$version" ]; then
    error 'unable to detect drupal version'
  fi

  if [ "$version" == 6 -o "$version" == 7 ]; then
    sql_query_result "select name from users where uid = 1"
  elif [ "$version" == 8 ]; then
    sql_query_result "select name from users_field_data where uid = 1"
  fi
}

drupal_set_drupal_6_or_7_sitename()
{

  if [ -n "$site_title" ]; then
    site_title_esc=$(escape_quotes "$site_title")
    update_site_name_sql="UPDATE variable SET value = 's:%s:\"%s\"' WHERE name = 'site_name';"
    sql_query "`printf "$update_site_name_sql" ${#site_title} "$site_title_esc"`"
  else
    echo Found, changing site_name to $fqdn
    sql_query "update variable set value=concat('s:', length('$fqdn'), ':\"', '$fqdn', '\"') where name='site_name'"
  fi
}

drupal_base_url_sed_script=":a
s|^[[:space:]]*\\\$base_url[[:space:]]*=[[:space:]]*'[^']*';|\\\$base_url = '$WEBENABLED_HOSTING_LINK_BASE_URL';|
tb
\$a\\
\\\$base_url = '$WEBENABLED_HOSTING_LINK_BASE_URL';
n
ba
:b
{
n
bb
}
"

drupal_update_php_config()
{
  # this function is not used anymore
  # it's here just for reference...
  # check the functions: drupal_update_php_config_6, drupal_update_php_config_7, drupal_update_php_config_8
  local drupal_base_url_none_sed_script="s|^[[:space:]]*\\\$base_url[[:space:]]*=[[:space:]]*'[^']*';||"

  local driver

  if version=`sql_query_result "select schema_version from system where name = 'system ' and type = 'module'"` \
    && [ -n "$version" ] && [ $version -ge 7000 ]
  then
    driver='\1'
    if [ -n "$WEBENABLED_HOSTING_LINK_PHP_FORCE_DB_DRIVER" ]
    then
      driver="$WEBENABLED_HOSTING_LINK_PHP_FORCE_DB_DRIVER"
    fi
    /bin/echo "
           s/^[[:space:]]*'driver'[[:space:]]*=>[[:space:]]*'\\([^']*\\)'[[:space:]]*,/    'driver' => '$driver',/
           s/^[[:space:]]*'username'[[:space:]]*=>[[:space:]]*.*/    'username' => '$mysql_user',/
           s/^[[:space:]]*'password'[[:space:]]*=>[[:space:]]*.*/    'password' => '$sedphpencoded_mysql_password',/
           s/^[[:space:]]*'host'[[:space:]]*=>[[:space:]]*.*/    'host' => '$mysql_host',/
           s/^[[:space:]]*'port'[[:space:]]*=>[[:space:]]*.*/    'port' => '$mysql_port',/
           s/^[[:space:]]*'database'[[:space:]]*=>[[:space:]]*.*/    'database' => '$hosting_database',/
    " | run_ised "$home/public_html/$vhost/sites/default/settings.php"
  else
    driver='\2'
    if [ -n "$WEBENABLED_HOSTING_LINK_PHP_FORCE_DB_DRIVER" ]
    then
      driver="$WEBENABLED_HOSTING_LINK_PHP_FORCE_DB_DRIVER"
    fi
    /bin/echo "s|^\\(\\\$db_url = '\\)\\(mysqli*\\):.*|\\1$driver://$mysql_user:$urlencoded_mysql_password@$mysql_host:$mysql_port/$hosting_database';|" |
    run_ised "$home/public_html/$vhost/sites/default/settings.php" || exit 1
  fi
  if [ -n "$WEBENABLED_HOSTING_LINK_BASE_URL" ]
  then
    if [ o"$WEBENABLED_HOSTING_LINK_BASE_URL" = o"none" ]
    then
      echo "$drupal_base_url_none_sed_script" |
      run_ised "$home/public_html/$vhost/sites/default/settings.php" || exit 1
    else
      echo "$drupal_base_url_sed_script" |
      run_ised "$home/public_html/$vhost/sites/default/settings.php" || exit 1
    fi

    # removing the file_temporary_path before exporting the site
    run_mysql -B -D drupal -e "DELETE FROM variable WHERE name = 'file_temporary_path';"

  else
    # if the site is not to be exported, then add a custom temp dir
    # to fix a know problem in drupal dealing with tmp files (when multiple
    # users share /tmp)

    local is_tmp_set
    is_tmp_set=$(mysql -B -D drupal -N -e "SELECT * FROM variable WHERE name = 'file_temporary_path'")
    local tmp_dir="/tmp/.private/$user_web"
    local tmp_sql_str
    if [ -n "$is_tmp_set" ]; then
      tmp_sql_str="UPDATE variable SET value = 's:${#tmp_dir}:\"$tmp_dir\";' WHERE name = 'file_temporary_path'"
    else
      tmp_sql_str="INSERT INTO variable VALUES ( 'file_temporary_path', 's:${#tmp_dir}:\"$tmp_dir\";');"
    fi

    run_mysql -B -D drupal -e "$tmp_sql_str" 
  fi
}

drupal_update_php_config_6()
{
  local drupal_base_url_none_sed_script="s|^[[:space:]]*\\\$base_url[[:space:]]*=[[:space:]]*'[^']*';||"

  local driver='\2'

  /bin/echo "s|^\\(\\\$db_url = '\\)\\(mysqli*\\):.*|\\1$driver://$mysql_user:$urlencoded_mysql_password@$mysql_host:$mysql_port/$hosting_database';|" | \
    run_ised "$home/public_html/$vhost/sites/default/settings.php"

}

drupal_update_php_config_7() {
  local drupal_base_url_none_sed_script="s|^[[:space:]]*\\\$base_url[[:space:]]*=[[:space:]]*'[^']*';||"

  local driver='\1'

  /bin/echo "
         s/^[[:space:]]*'driver'[[:space:]]*=>[[:space:]]*'\\([^']*\\)'[[:space:]]*,/    'driver' => '$driver',/
         s/^[[:space:]]*'username'[[:space:]]*=>[[:space:]]*.*/    'username' => '$mysql_user',/
         s/^[[:space:]]*'password'[[:space:]]*=>[[:space:]]*.*/    'password' => '$sedphpencoded_mysql_password',/
         s/^[[:space:]]*'host'[[:space:]]*=>[[:space:]]*.*/    'host' => '$mysql_host',/
         s/^[[:space:]]*'port'[[:space:]]*=>[[:space:]]*.*/    'port' => '$mysql_port',/
         s/^[[:space:]]*'database'[[:space:]]*=>[[:space:]]*.*/    'database' => '$hosting_database',/
  " | run_ised "$home/public_html/$vhost/sites/default/settings.php"

}

drupal_update_php_config_8() {
  local random_str=""
  local public_dir="$home/public_html/$vhost"
  local main_config="$public_dir/sites/default/settings.php"

  local -a old_paths
  local -a new_paths

  random_str=`wedp_gen_random_str 44`

  local p_dir
  for p_dir in `sed -ne '/^\$config_directories\[/ {  s/.\+\(sites\/default\/files\/config_[A-Za-z0-9_-]\+\).\+/\1/; p; }' "$main_config" | sort | uniq`; do
    old_paths+=("$p_dir")
    new_paths+=("`dirname "$p_dir"`/config_`wedp_gen_random_str 44`")
  done

  sed -i -e \
  "/^\$databases\['default'\]\['default'\][[:space:]]*=[[:space:]]*array[[:space:]]*([[:space:]]*$/,/^)\;$/ {
   s/^[[:space:]]*'username'[[:space:]]*=>[[:space:]]*.*/  'username' => '$mysql_user',/;
   s/^[[:space:]]*'password'[[:space:]]*=>[[:space:]]*.*/  'password' => '$sedphpencoded_mysql_password',/;
   s/^[[:space:]]*'host'[[:space:]]*=>[[:space:]]*.*/  'host' => '$mysql_host',/;
   s/^[[:space:]]*'port'[[:space:]]*=>[[:space:]]*.*/  'port' => '$mysql_port',/;
   s/^[[:space:]]*'database'[[:space:]]*=>[[:space:]]*.*/  'database' => '$hosting_database',/;
  }
  " "$home/public_html/$vhost/sites/default/settings.php"

  if [ ${#old_paths[@]} -gt 0 ]; then
    local sed_dirs_exp='/^\$config_directories\[/ {';
    local previous_dir new_dir

    for (( i=0; i < ${#old_paths[@]}; i++ )); do
      previous_dir="${old_paths[$i]}"
      new_dir="${new_paths[$i]}"

      if [ -d "$previous_dir" -a ! -e "$new_dir" ]; then
        echo "Moving $previous_dir to $new_dir"
        mv -f "$previous_dir" "$new_dir"

        local site_vars
        local new_site_yml
        for site_vars in "$new_dir"/*; do
          if [ ! -d "$site_vars" ]; then
            continue
          fi

          new_site_yml="$site_vars/system.site.yml"
          if [ -f "$new_site_yml" ]; then
            echo "Setting site name to environment `basename "$site_vars"`"
            sed -i -e "s/^name:.*/name: `escape_sed "$fqdn"`/;" \
              "$new_site_yml"
          fi
        done

        sed_dirs_exp+="
          s/`escape_sed "$previous_dir"`/`escape_sed "$new_dir"`/g;
        "
      fi
    done

    sed_dirs_exp+=' }'

    sed -i -e "$sed_dirs_exp" "$main_config"
  fi
  
  # sed -i -e \
  #  "/^\$config_directories\[/ {
  #    s|\(sites/default/files/config_\)[A-Za-z0-9_-]\+\(/.\+\)|\1$random_str\2|;
  #   }
  #   " "$home/public_html/$vhost/sites/default/settings.php"
}

drupal_set_tmp_6_or_7() {
  local is_tmp_set=""

  is_tmp_set=$(mysql -B -D drupal -N -e "SELECT * FROM variable WHERE name = 'file_temporary_path'")

  local tmp_dir="$HOME/.tmp"

  if [ ! -d "$tmp_dir" ] && !  mkdir -m 700 "$tmp_dir"; then
    echo "Warning: unable to create temporary directory '$tmp_dir'" 1>&2
    return 1
  fi

  local tmp_sql_str=""

  if [ -n "$is_tmp_set" ]; then
    tmp_sql_str="UPDATE variable SET value = 's:${#tmp_dir}:\"$tmp_dir\";' WHERE name = 'file_temporary_path'"
  else
    tmp_sql_str="INSERT INTO variable VALUES ( 'file_temporary_path', 's:${#tmp_dir}:\"$tmp_dir\";');"
  fi

  run_mysql -B -D drupal -e "$tmp_sql_str"
}

drupal_set_tmp_8() {
  :
}

drupal_set_cron_key_6_or_7() {
  :
}

drupal_set_cron_key_8() {
   local new_key=`wedp_gen_random_str 43`
  local sql_cron_key="UPDATE key_value SET value = 's:${#new_key}:\"$new_key\";' WHERE collection = 'state' AND name = 'system.cron_key';"

  run_mysql -B -D drupal -e "$sql_cron_key"
}


drupal_update_civicrm_config() {
  /bin/echo "
     s/^[[:space:]]*define([[:space:]]*'CIVICRM_UF_DSN'[[:space:]]*,[[:space:]]*'mysql:\/\/.*/define('CIVICRM_UF_DSN', 'mysql:\/\/$mysql_user:$urlencoded_mysql_password@$mysql_host:$mysql_port\/civicrm\?new_link=true');/
     s/^[[:space:]]*define([[:space:]]*'CIVICRM_DSN'[[:space:]]*,[[:space:]]*'mysql:\/\/.*/define('CIVICRM_DSN', 'mysql:\/\/$mysql_user:$urlencoded_mysql_password@$mysql_host:$mysql_port\/civicrm\?new_link=true');/
     s/^[[:space:]]*\$civicrm_root[[:space:]]*=[[:space:]]*.*/\$civicrm_root = '\/home\/clients\/websites\/$mysql_user\/public_html\/$vhost\/sites\/all\/modules\/civicrm';/
     s/^[[:space:]]*define([[:space:]]*'CIVICRM_TEMPLATE_COMPILEDIR'[[:space:]]*,[[:space:]]*'.*/define('CIVICRM_TEMPLATE_COMPILEDIR', '\/home\/clients\/websites\/$mysql_user\/public_html\/$vhost\/sites\/default\/files\/civicrm\/templates_c\/');/
     s/^[[:space:]]*define([[:space:]]*'CIVICRM_TEMPLATE_COMPILEDIR'[[:space:]]*,[[:space:]]*'.*/define('CIVICRM_TEMPLATE_COMPILEDIR', '\/home\/clients\/websites\/$mysql_user\/public_html\/$vhost\/sites\/default\/files\/civicrm\/templates_c\/');/
     s/^[[:space:]]*define([[:space:]]*'CIVICRM_UF_BASEURL'[[:space:]]*,[[:space:]]*'.*/define('CIVICRM_UF_BASEURL', 'htpp:\/\/$fqdn\/');/
    " | run_ised "$home/public_html/$vhost/sites/default/civicrm.settings.php"

  echo "
         s/w_[[:alnum:]]\{2,6\}/$mysql_user/g
         s/\/public_html\/[[:alnum:]]\{2,6\}\/sites/\/public_html\/$vhost\/sites/g
  " | run_ised "$home/public_html/$vhost/sites/default/files/civicrm/templates_c/en_US/ConfigAndLog/Config.IDS.ini"

  local db_orig="$database" # save the default $database value to restore later
  database="civicrm"      # work on the civic_crm db, not drupal
  civicrm_domain=`sql_query_result "select config_backend from civicrm_domain where id = 1"`
  new_civicrm_domain=`echo "$civicrm_domain"|"$dir/civicrm-domain-update.php" "$mysql_user" "$fqdn"`
  `sql_query_result "update civicrm_domain set config_backend = '$new_civicrm_domain' where id = 1"`
  database="$db_orig" # restore the default value back because sql_query_result uses it
}

drupal_reset_admin_time_6_or_7() {
  # reset the admin creation time
  sql_query "UPDATE users SET created = `date +%s` WHERE uid = 1"
}

drupal_reset_admin_time_8() {
  sql_query "UPDATE users_field_data SET created = `date +%s` WHERE uid = 1"
}


drupal_detect_version() {
  local db="$1"
  local version=""

  if run_mysql -BN -D "$db" -e "describe system;" &>/dev/null; then
    version=`run_mysql -BN -D "$db" \
      -e "SELECT schema_version FROM system WHERE \
                  name = 'system ' and type = 'module'"`
    if [ $? -eq 0 -a -n "$version" ]; then
      echo "${version:0:1}"
      return 0
    fi
  elif run_mysql -BN -D "$db" -e "describe key_value;" &>/dev/null; then
    version=`run_mysql -BN -D "$db" \
      -e "SELECT value FROM key_value WHERE \
                  collection = 'system.schema' AND name = 'text';"`

    if [ $? -eq 0 -a -n "$version" ]; then
      version=${version#s:[0-9]:\"}
      version=${version#i:} # in case it's integer i:NNN;
      version=${version//[\"\;]/}
      echo "${version:0:1}"
      return 0
    fi
  fi

  return 1
}

drupal_custom()
{
  local version=""
  local civic_crm_conf="$home/public_html/$vhost/sites/default/civicrm.settings.php"

  run chmod 751 "$home/public_html/$vhost/sites/default"
  run chmod 640 "$home/public_html/$vhost/sites/default/settings.php"

  version=`drupal_detect_version "$database"`
  if [ $? -ne 0 -o -z "$version" ]; then
    error 'unable to detect drupal version'
  fi

  if [ -z "$opt_n" ]; then
    if [ "$version" == 6 -o "$version" == 7 ]; then
      echo 'Clearing table cache (ignore errors)'
      sql_clear_table cache
      echo 'Clearing table sessions (ignore errors)'
      sql_clear_table sessions

    fi
  else
    echo "Updating settings.php"

    "drupal_update_php_config_$version"

    if [ -n "$initial_deployment" ]; then
      if [ "$version" == 6 -o "$version" == 7 ]; then
        drupal_reset_admin_time_6_or_7
        drupal_set_drupal_6_or_7_sitename
      else
        "drupal_reset_admin_time_$version"
      fi
    fi

    if [ "$version" == 6 -o "$version" == 7 ]; then
      drupal_set_tmp_6_or_7
      drupal_set_cron_key_6_or_7
      ( cd "$home/public_html/$vhost" && drush cc all )
    else
      "drupal_set_tmp_$version"
      "drupal_set_cron_key_$version"
      ( cd "$home/public_html/$vhost" && drush cache-rebuild )
    fi

    aws_cdn_endpoint=`deref_os_prop "$we_base_dir" aws_cdn_endpoint 2>/dev/null`
    if [ -n "$initial_deployment" -a -n "$aws_cdn_endpoint" ]; then
      "$we_base_dir/bin/seeds/drupal/install-modules" cdn
    fi

    if [ -f "$civic_crm_conf" ]; then
      drupal_update_civicrm_config
    fi
  fi
}
