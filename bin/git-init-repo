#!/bin/bash

usage() {
  echo "Usage: `basename "$0"` [ options ] <name>
  
  Options
    -d <target_dir>              the target directory where to clone
    -I                           initialize repository with a commit
    -r remote_name=remote_addr   sets the remote name and address
                                 (this flag can be used multiple times)
    -c key=value                 options to be saved by git config.
                                 This option can be used multiple times


  <name> is just a friendly short name when the -d option is not used
"
  exit 1
}


# main

[ $# -eq 0 ] && usage

if [ $EUID -eq 0 ]; then
  echo "Error: this script should not be run with ROOT privileges" 1>&2
  exit 1
fi

getopt_flags='d:r:c:I'
unset initialize target_dir
declare -a remotes_ar=()
declare -a configs_ar=()
while getopts $getopt_flags OPTNAME; do
  case "$OPTNAME" in
    d)
      target_dir="$OPTARG"
      ;;
    I)
      initialize=1
      ;;
    r)
      if echo "$OPTARG" | egrep -q '^[A-Za-z0-9._-]+=.+'; then
        remotes_ar+=( "$OPTARG" )
      else
        echo "Error: parameter passed to -r has an invalid format." 1>&2
        exit 1
      fi
      ;;
    c)
      if echo "$OPTARG" | egrep -q '^[A-Za-z0-9._-]+=.+'; then
        configs_ar+=( "$OPTARG" )
      else
        echo "Error: parameter passed to -c has an invalid format." 1>&2
        exit 1
      fi
      ;;
    *)
      exit 1
      ;;
  esac
done
[ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

name="$1"
[ -z "$name" ] && usage

if [ -z "$target_dir" ]; then
  target_dir="$HOME/repositories/$name.git"
elif [ "${target_dir:0:1}" != "/" ]; then
  target_dir="$HOME/$target_dir"
fi

git init --bare "$target_dir"
if [ $? -ne 0 ]; then
  echo "Error: unable to initiliaze a git repo on dir '$target_dir'" 1>&2
  exit 1
fi

GIT_DIR="$target_dir"
if [ -n "$initialize" ]; then
  work_dir=`mktemp -d`
  if [ $? -ne 0 ]; then
    echo "Error: unable to create temporary directory" 1>&2
    exit 1
  fi
  trap 'ex=$? ; rm -rf "$work_dir"; trap - EXIT INT HUP TERM; exit $ex' EXIT INT HUP TERM

  git clone -l "file://$target_dir" "$work_dir"
  if [ $? -ne 0 ]; then
    echo "Error: unable to clone from '$target_dir'" 1>&2
    exit 1
  fi

  if ! author_name=`git config --global user.name 2>/dev/null`; then
    author_name='DevPanel Service'
  fi
  if ! author_email=`git config --global user.email 2>/dev/null`; then
    author_email="support@devpanel.com"
  fi

  GIT_DIR="$GIT_DIR" git -c "user.name=$author_name" \
    -c "user.email=$author_email" commit --allow-empty \
    -m "Repository initiliazed using DevPanel"

  if [ $? -ne 0 ]; then
    echo "Error: failed to add the initial commit to the repo" 1>&2
    exit 1
  fi

  GIT_DIR="$GIT_DIR" git push origin master
  if [ $? -ne 0 ]; then
    echo "Error: unable to push the initial commit back to the repository" 1>&2
    exit 1
  fi
fi

for remote_str in ${remotes_ar[@]}; do
  # split the name=value string
  remote_name=${remote_str%%=*}
  remote_addr=${remote_str#*=}

  # if it was initialized earlier, and there's a new origin, then remove the
  # previous origin before attempting to add the new one
  if [ -n "$initialize" -a "$remote_name" == "origin" ]; then
    origin_path="$GIT_DIR/refs/remotes/origin/"
    if [ -e "$origin_path" ]; then
      GIT_DIR="$GIT_DIR" git remote remove origin
    fi
  fi

  GIT_DIR="$GIT_DIR" git remote add "$remote_name" "$remote_addr"
done

for config_str in ${configs_ar[@]}; do
  # split the name=value string
  config_key=${config_str%%=*}
  config_vle=${config_str#*=}

  GIT_DIR="$GIT_DIR" git config "$config_key" "$config_vle"
done

exit 0
