#!/bin/sh
# Options:
#  -s         -- seed app name
#  -i         -- read admin's password from stdin
#  -I         -- set admin's password identical to mysql normal user password found in .mysql.passwd
#  -P         -- ACTION: reset all passwords (no ACTIONS at all defaults to -P)
#  -p         -- ACTION: only reset admin's password
#  -m ADDRESS -- ACTION: change admin's email
#  -M         -- ACTION: send new passwords to admin's address (requires -P)
#  -n         -- ACTION: only update settings.php


dir=`dirname "$0"`


append() { local a="$1" b="$2"; if [ -z "$a" ]; then echo "$b"; else echo -e "$a\n$b"; fi; }

run()
{
  echo "  running $@"
  "$@"
}
run_mysql()
{
  echo "  running mysql $@" >&2
  mysql "$@"
}
run2()
{
  echo "  running $@" >&2
  "$@"
}

error()
{
  local message="$1"
  echo "ERROR${message:+: }$message" >&2
  exit 1;
}

action_opt="";
opt_m="" opt_M="" opt_p="" opt_P="" subsystem="" opt_i="" opt_I="" opt_n=""


while getopts 'pPMm:s:iIn' OPTOPT
do
  if ! echo "$OPTOPT" | egrep -q '^(s|i|I)$';then action_opt=1; fi
  case $OPTOPT in
  s) subsystem="$OPTARG";;
  m) opt_m="$OPTARG";;
  i) opt_i=1;;
  I) opt_I=1;;
  M) opt_M=1;;
  P) opt_P=1;;
  p) opt_p=1;;
  n) opt_n=1;;
  *) error;;
  esac
done


case "$subsystem" in
  drupal|joomla|wordpress|magento|projectpier|mantis|scratch|omb|elgg|silverstripe) :;;
  *) error "invalid subsystem";;
esac

[ -z "$action_opt" ] && opt_P=1

if [ -n "$opt_M" ] && [ o"$opt_P" = o"" -a o"$opt_p" = o"" ]; then error "-M requires -P or -p"; fi

user_web=`whoami`
vhost=`echo "$user_web"|sed 's/w_//'`
user_db="b_$vhost"
config_dir="/opt/webenabled/config/vhosts/$vhost"
database="$subsystem"
if ! fqdn=`readlink $config_dir/names/default` || ! [ -n "$fqdn" ]
then
  error "Cannot get the primary name from $config_dir/names/default"
fi
home="`eval \"echo ~$user_web\"`"
vhost_config_dir=.webenabled/private

check_user()
{
  local user="$1"
  if ! `id -u "$user" 2>/dev/null >/dev/null`
  then
    error "No such user: $user"
  fi
}

check_user "$user_db" || error
check_user "$user_web" || error

if ! [ -d "$home" ]
then
  error "Home dir $home does not exist"
fi

echo "Obtaining mysql credentials"
mysql_passwd_file="$vhost_config_dir/.mysql.passwd"
[ -r "$mysql_passwd_file" ] || mysql_passwd_file="$home/.mysql.passwd"
mysql_user=`run2 awk "BEGIN{FS=\":\"}!f && \\$1!=\"admin\"{print \\$1;f=1}END{exit f==0}" "$mysql_passwd_file"` || error
mysql_password=`run2 awk "BEGIN{FS=\":\"}!f && \\$1!=\"admin\"{print \\$2;f=1}END{exit f==0}" "$mysql_passwd_file"` || error
if host=`run2 awk "BEGIN{FS=\":\"}!f && \\$1!=\"admin\" && NF > 2 {print \\$3;f=1}END{exit f==0}" "$mysql_passwd_file"`
then
  port=`run2 awk "BEGIN{FS=\":\"}!f && \\$1!=\"admin\" && NF > 3 {print \\$4;f=1}END{exit f==0}" "$mysql_passwd_file"` || error
  [ -z "$port" ] && port=3306
else
  host=`run2 awk "BEGIN{FS=\":\"}\\$1==\"$user_db\"{print \\$5;f=1}END{exit f==0}" /opt/dbmgr/config/db-daemons.conf` || error
  port=`run2 awk "BEGIN{FS=\":\"}\\$1==\"$user_db\"{print \\$6;f=1}END{exit f==0}" /opt/dbmgr/config/db-daemons.conf` || error
fi

hosting_database=`run2 awk "BEGIN{FS=\":\"}!f && \\$1!=\"admin\" && NF > 4 {print \\$5;f=1}END{exit f==0}" "$mysql_passwd_file"` || hosting_database=$database
[ -z "$hosting_database" ] && hosting_database=$database


echo "Looking for database '$database'"
databases=`run_mysql -B -e "show databases;"` 2>&1|| error
if ! echo "$databases"|grep -q "^$database\$"
then
  error "Error: not a $subsystem site"
fi

sql_query()
{
  local query="$1"
  run_mysql -B -e "$query" "$database"
}

sql_query_result()
{
  local query="$1"
  local result=`sql_query "$1"`
  local code=$?
  echo "$result"|sed 1d || return 1
  return $code
}

get_users()
{
  case "$subsystem" in
    drupal) sql_query_result "select name from users where name <> ''";;
    joomla) sql_query_result "select username from jos_users where username <> ''";;
    wordpress) sql_query_result "select user_login from wp_users where user_login <> ''";;
    magento) sql_query_result "select username from admin_user where username <> ''";;
    projectpier) sql_query_result "select username from pp_users where username <> ''";;
    mantis) sql_query_result "select username from mantis_user_table where username <> ''";;
    silverstripe) sql_query_result "select email from Member where email <> ''";;
    omb) return 0;;
    scratch) return 0;;
    elgg) sql_query_result "select username from users_entity where username <> ''";;
    *) error "get_users:$subsystem";;
  esac
}

genpass()
{
  case "$subsystem" in
  *) "$dir/genpass";;
  esac
}

encrypt()
{
  local password="$1"
  case "$subsystem" in
  drupal)
    if version=`sql_query_result "select schema_version from system where name = 'system' and type = 'module'"` &&
       [ -n "$version" ] &&
       [ $version -ge 7000 ]
    then
      echo -n "$password"|"$dir/drupal7-crypt.php"
    else
      echo -n "$password"|md5sum|sed 's/  -$//'
    fi;;
  joomla) echo -n "$password"|"$dir/joomla-crypt.php";;
  wordpress) echo -n "$password"|"$dir/wordpress-crypt.php";;
  magento) echo -n "$password"|"$dir/magento-crypt.php";;
  projectpier) echo -n "$password"|"$dir/projectpier-crypt.php";;
  mantis) echo -n "$password"|"$dir/mantis-crypt.php";;
  elgg) echo -n "$password"|"$dir/elgg-crypt.php";;
  silverstripe) echo -n "$password"|"$dir/silverstripe-crypt.php";;
  *) error "encrypt:$subsystem";;
  esac
}

set_password()
{
  local user="$1" encrypted_password="$2"
  local token salt
  case "$subsystem" in
  drupal)
    sql_query "update users set pass = '$encrypted_password' where name = '$user';";;
  joomla) 
    sql_query "update jos_users set password = '$encrypted_password' where username = '$user';";;
  wordpress) 
    sql_query "update wp_users set user_pass = '$encrypted_password' where user_login = '$user';";;
  magento) 
    sql_query "update admin_user set password = '$encrypted_password' where username = '$user';";;
  projectpier) 
    token=`echo "$encrypted_password"|cut -d: -f1`
    salt=`echo "$encrypted_password"|cut -d: -f2`
    [ -n "$token" ] && [ -n "$salt" ] || error "set_password:$subsystem"
    sql_query "update pp_users set token = '$token', salt='$salt' where username = '$user';";;
  mantis) 
    sql_query "update mantis_user_table set password = '$encrypted_password' where username = '$user';";;
  elgg)
    salt=`echo $encrypted_password | cut -f2 -d' '`
    site_key=`echo $encrypted_password | cut -f3 -d' '`
    encrypted_password=`echo $encrypted_password | cut -f1 -d' '`
    sql_query "update datalists set value = '$site_key' where name = '__site_secret__'"
    sql_query "update users_entity set salt = '$salt' where username = '$user';"
    sql_query "update users_entity set password = '$encrypted_password' where username = '$user';";;
  silverstripe)
    salt=`echo $encrypted_password | cut -f2 -d' '`
    encrypted_password=`echo $encrypted_password | cut -f1 -d' '`
    sql_query "update Member set Password = '$encrypted_password', Salt = '$salt' where email = '$user';"
    sql_query "update MemberPassword set Password = '$encrypted_password', Salt = '$salt' where ID = 1;";;
  *) 
    error "set_password:$subsystem";;
  esac
}

set_email()
{
  local user="$1" email="$2"
  case "$subsystem" in
  drupal)
      sql_query "update users set mail = '$email' where name = '$user';";;
  joomla)
      sql_query "update jos_users set email = '$email' where username = '$user';";;
  wordpress)
      sql_query "update wp_users set user_email = '$email' where user_login = '$user';";;
  magento)
      sql_query "update admin_user set email = '$email' where username = '$user';";;
  projectpier)
      sql_query "update pp_users set email = '$email' where username = '$user';";;
  mantis)
      sql_query "update mantis_user_table set email = '$email' where username = '$user';";;
  elgg)
      sql_query "update users_entity set email = '$email' where username = '$user';";;
  silverstripe)
      return 0;;
      #sql_query "update Member set email = '$email' where email = '$user';";;
  *) 
      error "set_email:$subsystem";;
  esac
}

get_email()
{
  local user="$1"
  case "$subsystem" in
  drupal)
    sql_query_result "select mail from users where name = '$user'";;
  joomla)
    sql_query_result "select email from jos_users where username = '$user'";;
  wordpress)
    sql_query_result "select user_email from wp_users where user_login = '$user'";;
  magento)
    sql_query_result "select email from admin_user where username = '$user'";;
  projectpier)
    sql_query_result "select email from pp_users where username = '$user'";;
  mantis)
    sql_query_result "select email from mantis_user_table where username = '$user'";;
  omb)
    return 0;;
  elgg)
    sql_query_result "select email from users_entity where username = '$user'";;
  silverstripe)
    sql_query_result "select email from Member where email = '$user'";;
  *) 
      error "set_email:$subsystem";;
  esac
}

sql_clear_table()
{
  for i 
  do
    sql_query "delete from $i"
  done
}

drupal_set_drupal6_sitename()
{
  local old_fqdn
  if old_fqdn=`sql_query_result "select * from variable where name='site_name'"` &&
     [ -n "$old_fqdn" ]
  then
    echo Found, changing site_name to $fqdn
    sql_query "update variable set value=concat('s:', length('$fqdn'), ':\"', '$fqdn', '\"') where name='site_name'" || error
    if [ -z "$email" ]
    then
      error "Empty admin's email"
    else
      echo "Changing site_mail to admin's email $email"
      sql_query "update variable set value=concat('s:', length('$email'), ':\"', '$email', '\"') where name='site_mail'" || error
    fi
  else
    echo Not found
  fi
}

drupal_set_drupal6_sitename()
{
  local old_fqdn
  if old_fqdn=`sql_query_result "select * from variable where name='site_name'"` &&
     [ -n "$old_fqdn" ]
  then
    echo Found, changing site_name to $fqdn
    sql_query "update variable set value=concat('s:', length('$fqdn'), ':\"', '$fqdn', '\"') where name='site_name'" || error
    if [ -z "$email" ]
    then
      error "Empty admin's email"
    else
      echo "Changing site_mail to admin's email $email"
      sql_query "update variable set value=concat('s:', length('$email'), ':\"', '$email', '\"') where name='site_mail'" || error
    fi
  else 
    echo Not found
  fi
}

drupal_update_php_config()
{
  local perms1=`stat -c%a "public_html/$vhost/sites/default"` || exit 1
  local perms2=`stat -c%a "public_html/$vhost/sites/default/settings.php"` || exit 1
  run chmod +w "public_html/$vhost/sites/default" || exit 1
  run chmod +w "public_html/$vhost/sites/default/settings.php" || exit 1
  if version=`sql_query_result "select schema_version from system where name = 'system' and type = 'module'"` &&
     [ -n "$version" ] &&
     [ $version -ge 7000 ]
  then
    echo "
           s/^[[:space:]]*'username'[[:space:]]*=>[[:space:]]*.*/    'username' => '$mysql_user',/
           s/^[[:space:]]*'password'[[:space:]]*=>[[:space:]]*.*/    'password' => '$mysql_password',/
           s/^[[:space:]]*'host'[[:space:]]*=>[[:space:]]*.*/    'host' => '$host',/
           s/^[[:space:]]*'port'[[:space:]]*=>[[:space:]]*.*/    'port' => '$port',/
           s/^[[:space:]]*'database'[[:space:]]*=>[[:space:]]*.*/    'database' => '$hosting_database',/
    " | run sed -f - -i "public_html/$vhost/sites/default/settings.php"
  else 
    echo "s|^\\\$db_url = .*|\$db_url = 'mysql://$mysql_user:$mysql_password@$host:$port/$hosting_database';|" |
    run sed -i -f - "public_html/$vhost/sites/default/settings.php" || exit 1
  fi
  run chmod "$perms1" "public_html/$vhost/sites/default" || exit 1
  run chmod "$perms2" "public_html/$vhost/sites/default/settings.php" || exit 1
}

#  drupal_civicrm_update_php_config()
#  {
#    local perms1='stat -c%a "public_html/$vhost/sites/default"` || exit 1
#     local perms1='stat -c%a "public_html/$vhost/sites/default/civicrm.settings.php"` || exit 1
#  run chmod +w "public_html/$vhost/sites/default" || exit 1
#  run chmod +w "public_html/$vhost/sites/default/civicrm.settings.php" || exit 1
#  if version='sql_query_result "select schema_version from system where name = 'system' and type 'module'"` &&
#    [ -n "$version" ] &&
#    [ $version -ge 7000 ]
#  then
#    echo "
#        s/^[[:space:]]*'username'[[:space:]]*=>[[:space:]]*.*/     'username' => '$mysql_user',/
#        s/^[[:space:]]*'password' [[:space:]]*=>[[:space:]]*.*/    'password' => '$mysql_password',/
#        s/^[[:space:]]*'host'[[:space:]]*=>[[:space:]]*.*/    'host' => '$host',/
#        s/^[[:space:]]*'port'[[:space:]]*=>[[:space:]]*.*/    'port' => '$port',/
#    " | run sed -f - -i "public_html/$vhost/sites/default/civicrm.settings.php"
#  else
#    echo "
#        s|^\\\define( 'CIVICRM_UF_DSN' .*|\define( 'CIVICRM_UF_DSN' , 'mysql://$mysql_user:$mysql_password@$host:$port/$hosting_database?new_link=true') ;,/
#        s|^\\\$civicrm_root = .*|\$civicrm_root = '/home/clients/website/w_$vhost/public_html/$vhost/sites/all/modules/civicrm' );,/
#        s|^\\\define( 'CIVICRM_TEMPLATES_COMPILEDIR' .*|\define( 'CIVICRM_TEMPLATE_COMPILEDIR' , '/home/clients/websites/w_$vhost/public_html/$vhost/sites/default/files/civicrm/templates_c/' );./
#        s|^\\\define( 'CIVICRM_UF_BASEURL' .*|\define( 'CIVICRM_UF_BASEURL' , 'http://$fqdn' );|" |
#        run sed - i - f - "public_html/$vhost/sites/default/civicrm.settings.php" || exit 1
#  fi
#  run chmod "$perms1" "public_html/$vhost/sites/default" || exit 1
#  run chmod "$perms2" "public_html/$vhost/sites/default/civicrm.settings.php" || exit 1
#
# }






drupal_custom()
{
  if [ -z "$opt_n" ]
  then
    echo 'Clearing table cache (ignore errors)'
    sql_clear_table cache
    echo 'Checking for drupal6 variables (ignore errors)'
    drupal_set_drupal6_sitename
  fi
  echo "Updating settings.php"
  drupal_update_php_config || error "Cannot update settings.php"
}

joomla_update_php_config()
{
  echo "
           s/^[[:space:]]*var[[:space:]]\{1,\}\\\$sitename[[:space:]]\{1,\}=.*/var \\\$sitename = '$fqdn';/
           s/^[[:space:]]*var[[:space:]]\{1,\}\\\$host[[:space:]]\{1,\}=.*/var \\\$host = '$host:$port';/
           s/^[[:space:]]*var[[:space:]]\{1,\}\\\$user[[:space:]]\{1,\}=.*/var \\\$user = '$mysql_user';/
           s/^[[:space:]]*var[[:space:]]\{1,\}\\\$mysql_password[[:space:]]\{1,\}=.*/var \\\$mysql_password = '$mysql_password';/
           s/^[[:space:]]*var[[:space:]]\{1,\}\\\$password[[:space:]]\{1,\}=.*/var \\\$password = '$mysql_password';/
           s/^[[:space:]]*var[[:space:]]\{1,\}\\\$db[[:space:]]\{1,\}=.*/var \\\$db = '$hosting_database';/
  " | run sed -f - -i "public_html/$vhost/configuration.php"
}

joomla_custom()
{
  echo "Updating configuration.php"
  joomla_update_php_config || error "Cannot update configuration.php"
}

wordpress_set_sitename()
{
   sql_query "update wp_options set option_value='http://$fqdn' where option_name='siteurl'" || return 1
   sql_query "update wp_options set option_value='http://$fqdn' where option_name='home'" || return 1
}

wordpress_update_php_config()
{
  keys=`lftp -c 'set cmd:at-exit;set xfer:max-redirections 16;  cat "http://api.wordpress.org/secret-key/1.1";'`
  keys=`echo $keys | sed 's#[/&$\]#*#ig'`
  if [ -n "$keys" ]; then
    auth_key=$(echo $keys | sed 's#); define#);\n define#ig' | sed -n '1p')
    secure_auth_key=$(echo $keys | sed 's#); define#);\n define#ig' | sed -n '2p')
    logged_in_key=$(echo $keys | sed 's#); define#);\n define#ig' | sed -n '3p')
    nonce_key=$(echo $keys | sed 's#); define#);\n define#ig' | sed -n '4p')

    echo "
           s/^[[:space:]]*define[[:space:]]*([[:space:]]*'AUTH_KEY'.*$/$auth_key/
           s/^[[:space:]]*define[[:space:]]*([[:space:]]*'SECURE_AUTH_KEY'.*$/$secure_auth_key/
           s/^[[:space:]]*define[[:space:]]*([[:space:]]*'LOGGED_IN_KEY'.*$/$logged_in_key/
           s/^[[:space:]]*define[[:space:]]*([[:space:]]*'NONCE_KEY'.*$/$nonce_key/

    " | run sed -f - -i "public_html/$vhost/wp-config.php"
  fi

  echo "
           s/^[[:space:]]*define[[:space:]]*([[:space:]]*'DB_USER'.*/define('DB_USER', '$mysql_user');/
           s/^[[:space:]]*define[[:space:]]*([[:space:]]*'DB_PASSWORD'.*/define('DB_PASSWORD', '$mysql_password');/
           s/^[[:space:]]*define[[:space:]]*([[:space:]]*'DB_HOST'.*/define('DB_HOST', '$host:$port');/
           s/^[[:space:]]*define[[:space:]]*([[:space:]]*'DB_NAME'.*/define('DB_NAME', '$hosting_database');/
            
  " | run sed -f - -i "public_html/$vhost/wp-config.php"
}

wordpress_custom()
{
  if [ -z "$opt_n" ]
  then
    echo "Setting site URL"
    wordpress_set_sitename || error "Cannot set sitename"
  fi
  echo "Updating wp-config.php"
  wordpress_update_php_config || error "Cannot update wp-config.php"
}


magento_set_sitename()
{
   sql_query "update core_config_data set value='http://$fqdn/' where path='web/unsecure/base_url'" || return 1
   sql_query "update core_config_data set value='http://$fqdn/' where path='web/secure/base_url'" || return 1
}

magento_update_config()
{
  echo "
           s/^\([[:space:]]*\)\(<host>.*<\/host>\)/\1<host><![CDATA[$host:$port]]><\/host>/;
           s/^\([[:space:]]*\)\(<username>.*<\/username>\)/\1<username><![CDATA[$mysql_user]]><\/username>/;
           s/^\([[:space:]]*\)\(<password>.*<\/password>\)/\1<password><![CDATA[$mysql_password]]><\/password>/;
           s/^\([[:space:]]*\)\(<dbname>.*<\/dbname>\)/\1<dbname><![CDATA[$hosting_database]]><\/dbname>/;
            
  " | run sed -f - -i "public_html/$vhost/app/etc/local.xml"
}

magento_custom()
{
  if [ -z "$opt_n" ]
  then
    echo 'Clearing site access history'
    sql_clear_table core_session log_url log_url_info log_visitor log_visitor_info
    echo 'Clearing cache dir'
    run rm -rf "public_html/$vhost/var/cache/"*
    echo 'Setting site name'
    magento_set_sitename
  fi
  echo "Updating settings.php"
  magento_update_config || error "Cannot update settings.php"
}

projectpier_update_config()
{
  echo "
           s/^[[:space:]]*define[[:space:]]*([[:space:]]*'DB_USER'.*/define('DB_USER', '$mysql_user');/
           s/^[[:space:]]*define[[:space:]]*([[:space:]]*'DB_PASS'.*/define('DB_PASS', '$mysql_password');/
           s/^[[:space:]]*define[[:space:]]*([[:space:]]*'DB_HOST'.*/define('DB_HOST', '$host:$port');/
           s/^[[:space:]]*define[[:space:]]*([[:space:]]*'DB_NAME'.*/define('DB_NAME', '$hosting_database');/
           s/^[[:space:]]*define[[:space:]]*([[:space:]]*'ROOT_URL'.*/define('ROOT_URL', 'http:\\/\\/$fqdn');/
            
  " | run sed -f - -i "public_html/$vhost/config/config.php"
}

projectpier_custom()
{
  echo 'Clearing cache dir '
  run rm -rf "public_html/$vhost/cache/"*
  echo "Updating config.php"
  projectpier_update_config || error "Cannot update config.php"
}

mantis_update_config()
{
  fqdn_real=`echo $fqdn | cut -f2- -d\.`
  echo "
          s/{FQDN}/http:\/\/$vhost.$fqdn_real\//
  " | run sed -f - -i "public_html/$vhost/.htaccess"

  echo "
           s/^[[:space:]]*\$g_hostname[[:space:]]*=[[:space:]]*'.*/\t\$g_hostname = '$host:$port';/
           s/^[[:space:]]*\$g_db_username[[:space:]]*=[[:space:]]*'.*/\t\$g_db_username = '$mysql_user';/
           s/^[[:space:]]*\$g_db_password[[:space:]]*=[[:space:]]*'.*/\t\$g_db_password = '$mysql_password';/
           s/^[[:space:]]*\$g_database_name[[:space:]]*=[[:space:]]*'.*/\t\$g_database_name = '$hosting_database';/

  " | run sed -f - -i "public_html/$vhost/mantis/config_inc.php"
}

mantis_custom()
{
  mantis_update_config || error "Cannot update config_inc.php"
}

omb_update_config()
{
  echo "
           s/^[[:space:]]*host[[:space:]]*:[[:space:]]*.*/  host: $host:$port/
           s/^[[:space:]]*username[[:space:]]*:[[:space:]]*.*/  username: $mysql_user/
           s/^[[:space:]]*password[[:space:]]*:[[:space:]]*.*/  password: $mysql_password/
           s/^[[:space:]]*database[[:space:]]*:[[:space:]]*.*/  database: $hosting_database/

  " | run sed -f - -i "public_html/$vhost/app/config/config.yml"
}

omb_custom()
{
  omb_update_config || error "Cannot update config.yml"
}

elgg_update_config()
{
  echo "
           s/^[[:space:]]*\$CONFIG->dbuser[[:space:]]*=[[:space:]]*'.*$/\t\t\$CONFIG->dbuser = '$mysql_user';/
           s/^[[:space:]]*\$CONFIG->dbpass[[:space:]]*=[[:space:]]*'.*$/\t\t\$CONFIG->dbpass = '$mysql_password';/
           s/^[[:space:]]*\$CONFIG->dbhost[[:space:]]*=[[:space:]]*'.*$/\t\t\$CONFIG->dbhost = '$host:$port';/
           s/^[[:space:]]*\$CONFIG->dbname[[:space:]]*=[[:space:]]*'.*$/\t\t\$CONFIG->dbname = '$hosting_database';/

  " | run sed -f - -i "public_html/$vhost/engine/settings.php"
}

elgg_custom()
{
  # elgg is likely to get broken when hosting_link is used because of absolute paths in the database
  if [ -z $opt_n ]
  then
    sql_query "update datalists set value = '/home/clients/websites/w_$vhost/public_html/$vhost/' where name = 'path'" || return 1
    sql_query "update datalists set value = '/home/clients/websites/w_$vhost/public_html/files/' where name = 'dataroot'" || return 1
    sql_query "update sites_entity set url='http://$fqdn/' where guid = 1" || return 1
  fi
  elgg_update_config || error "Cannot update config.yml"
}

silverstripe_update_config()
{
  echo "
           s/^[[:space:]]*\"username\"[[:space:]]*=>[[:space:]]*.*/    \"username\" => \"$mysql_user\",/
           s/^[[:space:]]*\"password\"[[:space:]]*=>[[:space:]]*.*/    \"password\" => \"$mysql_password\",/
           s/^[[:space:]]*\"server\"[[:space:]]*=>[[:space:]]*.*/    \"server\" => \"$host:$port\",/
           s/^[[:space:]]*\"database\"[[:space:]]*=>[[:space:]]*.*/    \"database\" => \"$hosting_database\",/

  " | run sed -f - -i "public_html/$vhost/mysite/_config.php"
}

silverstripe_custom()
{
  silverstripe_update_config || error "Cannot update _config.php"
}

custom()
{
  echo "Performing $subsystem-specific customizations"
  case "$subsystem" in
  drupal) drupal_custom;;
  joomla) joomla_custom;;
  wordpress) wordpress_custom;;
  magento) magento_custom;;
  projectpier) projectpier_custom;;
  mantis) mantis_custom;;
  omb) omb_custom;;
  elgg) elgg_custom;;
  silverstripe) silverstripe_custom;;
  *) echo None;;
  esac
}

if [ -z "$opt_n" ]
then
  echo "Getting a list of $subsystem users"
  users=`get_users` || exit 1
  
  buffer=""
  email=""
  
  for user in $users
  do
    if [ -n "$opt_p" ] && [ o"$user" = o"admin" ] || [ -n "$opt_P" ]
    then
      if [ o"$user" = o"admin" ] && [ "$opt_i" = 1 ]
      then
        read -r new_password || error "Cannot read password"
      elif [ o"$user" = o"admin" ] && [ "$opt_I" = 1 ]
      then
        new_password="$mysql_password"
      else
        new_password=`genpass` || error "Cannot generate password"
      fi
      [ -n "$new_password" ] || error "Empty password"
      echo "${subsystem}_user_pass $user:$new_password"
      echo "webenabled_private_subsystem_password $subsystem:$user:$new_password"
      buffer=`append "$buffer" "$user:$new_password"`
      new_password_encrypted=`encrypt "$new_password"` || error
      [ -z "$new_password_encrypted" ] && echo empty password
      set_password "$user" "$new_password_encrypted" || error "Cannot change the password"
    fi
    if  [ o"$user" = o"admin" ] || [ o"$user" = o"administrator" ]
    then
      if [ -n "$opt_m" ]
      then
        echo "Changing admin's email"
        set_email "$user" "$opt_m" || error "Cannot change email"
      fi
      echo "Getting admin's email"
      email=`get_email "$user"` || error "Cannot get email"
    fi
  done
fi

if [ -n "$opt_P" ] || [ -n "$opt_p" ]
then
  run mkdir -p -m 0711 $home/.webenabled || error
  run mkdir -p -m 0711 $home/$vhost_config_dir || error
  password_basename="$subsystem.passwd"
  if [ -z "$opt_M" ]
  then
    echo "Writing new passwords to $password_basename"
    echo "$buffer" >"$home/$vhost_config_dir/$password_basename" || error
    ln -sf "$vhost_config_dir/$password_basename" "$home/$password_basename" || error # backward compat
    ln -sf "$password_basename" "$home/$vhost_config_dir/web.passwd" || error
  else
    echo "Removing $password_basename"
    rm -f "$home/$password_basename" # backward compat
    rm -f "$home/$vhost_config_dir/$password_basename"
    rm -f "$home/$vhost_config_dir/web.passwd"
    if [ -z "$email" ]
    then
      echo "Cannot get admin's email" >&2
      exit 1
    else
      echo "Sending new passwords to $email"
      echo "$buffer" | run mail -s "new $subsystem password${opt_P:+(s)} for $fqdn" "$email" || exit 1
    fi 
  fi
fi

custom || error "Cannot perform $subsystem-specific cusmomizations"
