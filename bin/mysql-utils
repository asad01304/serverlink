#!/bin/bash
#
# Converts MySQL tables storage types from one type to the other
# E.g.:  MyISAM -> InnoDB, InnoDB -> MyISAM

usage_repair_db() {
  local prog=$(basename "$0")
  echo "Usage: $prog <db_name>
Usage: $prog 

This command repairs the MySQL database of the current vhost.
"
  exit 1
}

usage_convert_tables_engine() {
  echo "Usage: $(basename "$0") <db_name> <new_engine>

Converts the specified database storage engine to the new engine type.
"
  exit 1
}

usage_convert_shortcut() {
  local prog=$(basename "$0")
  local type=${prog##*-}

  echo "Usage: $prog --yes
Usage: $prog <db_name>

This command converts the tables of the database to engine $type
"
  exit 1
}

is_valid_mysql_name() {
  local name="$1"
  local name_type="$2"

  if is_valid_mysql_db_or_table_name "$name"; then
    return 0
  else
    echo "$FUNCNAME(): invalid $name_type name" 1>&2
    return 1
  fi
}

is_valid_name_or_exit() {
  local status

  is_valid_mysql_name "$@"
  status=$?
  if [ $status -eq 0 ]; then
    return $status
  else
    exit $status
  fi
}

convert_database_engine() {
  local db_name="$1"
  local new_engine="$2"

  is_valid_mysql_name "$db_name" database  || return 1
  is_valid_mysql_name "$new_engine" engine || return 1

  local schema_db="information_schema"
  local sql_select="SELECT * FROM ENGINES WHERE ENGINE = '$new_engine';"
  local tables_with_schema="SELECT TABLE_NAME FROM TABLES WHERE "
  local tables_with_schema+="ENGINE != '$new_engine' AND TABLE_SCHEMA = '$db_name';"


  # confirm that engine exists on mysqld
  local engine_exists=$(mysql -BN -D "$schema_db" -e "$sql_select")
  if [ $? -ne 0 -o -z "$engine_exists" ]; then
    echo "$FUNCNAME(): error, engine '$new_engine' not enabled on MySQL server" 1>&2
    return 1
  fi

  # confirm that can access the $db_name
  if ! mysql -BN -D "$db_name" -e "SHOW TABLES" &>/dev/null; then
    echo "$FUNCNAME(): unable to access database $db_name" 1>&2
    return 1
  fi

  # get the list of tables with a different engine
  tables_to_convert=$(mysql -BN -D "$schema_db" -e "$tables_with_schema")
  if [ $? -ne 0 ]; then
    echo "$FUNCNAME(): unable to get the list of tables to convert" 1>&2
  fi

  if [ -z "$tables_to_convert" ]; then
    echo "Warning: there are no tables to be converted" 1>&2
    return 0
  fi

  local -i n_tables=0
  local -i n_success=0
  local -i n_failed=0
  local table
  while read table; do
    n_tables+=1
    local sql_convert="ALTER TABLE $table ENGINE = $new_engine;"

    if mysql -D "$db_name" -e "$sql_convert"; then
      local sql_table_engine="SELECT ENGINE FROM TABLES WHERE "
      local sql_table_engine+="TABLE_NAME = '$table' AND ENGINE = '$new_engine';"
      
      local engine_confirmed=$(mysql -BN -D "$schema_db" -e "$sql_table_engine")
      local status=$?
      if [ $status -eq 0 -a -z "$engine_confirmed" ]; then
        echo "$FUNCNAME(): Failed to convert table $table, maybe engine $new_engine is disabled on mysqld" 1>&2
        n_failed+=1
      elif [ $status -eq 0 ]; then
        n_success+=1
        echo "Successfully converted table $table"
      fi
    else # failed ALTER TABLE...
      n_failed+=1
      echo "$FUNCNAME(): Failed to convert table $table" 1>&2
    fi
  done <<< "$tables_to_convert"

  local msg=""
  if [ $n_success -gt 0 ]; then
    msg="Successfully converted $n_success tables to $new_engine"
  fi

  local ret_code
  if [ $n_failed -gt 0 ]; then
    ret_code=1
    if [ $n_success -eq 0 ]; then
      msg="Failed to convert $n_failed tables"
    else
      msg+=", failed to convert $n_failed tables"
    fi
  elif [ $n_failed -eq 0 -a $n_success -gt 0 ]; then
    ret_code=0
  else
    ret_code=1
    echo "$FUNCNAME(): unknown condition when evaluating success or failure. This code needs more work."
  fi
  
  echo "$msg"

  return $ret_code
}

guess_database_name() {
  db_name=$(get_apache_metadata_value "$sys_dir" 'app:0:_:db_name')
  if [ $? -eq 0 -a -n "$db_name" ]; then
    echo "$db_name"
    return 0
  else
    echo "$FUNCNAME(): unable to determine web site main database" 1>&2
    return 1
  fi
}

if ! hash mysqlcheck &>/dev/null; then
  echo "Error: missing mysqlcheck command" 1>&2
  exit 1
elif ! hash mysql &>/dev/null; then
  echo "Error: missing mysql command" 1>&2
  exit 1
fi

self_bin=$(readlink -e "$0")
dir=$(dirname "$self_bin")
sys_dir=$(readlink -e "$dir/..")

operation=$(basename "$0")

lib_file="$sys_dir/lib/functions"
if ! source "$lib_file"; then
  echo "Error: unable to source lib file $lib_file" 1>&2
  exit 1
fi

case "$operation" in
  repair-vhost-db)

    [ -n "$1" -a "$1" == "-h" ] && usage_repair_db

    if [ -z "$1" ]; then
      db_name=$(guess_database_name) || exit 1
    fi

    is_valid_name_or_exit "$db_name" database

    echo "Running a repair on database $db_name..."
    sleep 2
    run_verbose mysqlcheck -r "$db_name"
    exit_code=$?
    if [ $exit_code -eq 0 ]; then
      echo
      echo "Successfully finished repair of database $db_name"
    else
      echo "Error: repair failed" 1>&2
    fi
    ;;
  convert-tables-engine)
    [ -z "$1" -o -z "$2" ] && usage_convert_tables_engine
    db_name="$1"
    new_engine="$2"
    convert_database_engine "$db_name" "$new_engine"
    exit_code=$?
    ;;
  convert-tables-to-innodb|convert-tables-to-myisam)
    [ $# -eq 0 -o -z "$1" ] && usage_convert_shortcut

    if [ $# -eq 1 -a "$1" == "--yes" ]; then
      db_name=$(guess_database_name) || exit 1
    elif [ $# -eq 1 ]; then
      db_name="$1"
    else
      usage_convert_shortcut
    fi

    is_valid_name_or_exit "$db_name" database

    new_engine=${operation##*-}

    convert_database_engine "$db_name" "$new_engine"
    exit_code=$?

    ;;

  $(basename "$self_bin"))
    msg="please don't run this command directly. Check on this directory "
    msg+="for the scripts that link to this file."
    error "$msg"
    ;;
  *)
    exit_code=1
    echo "Error: unknown operation" 1>&2
    ;;
esac

exit $exit_code
