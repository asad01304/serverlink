#!/bin/bash
error() { echo "ERROR${@+: }$@" >&2; exit 1; }

usage() {
  local prog=`basename "$0"`
  echo "
  Usage: $prog <vhost>

  This script generates apache mod_macro configuration files.
"

  exit 1
}

run()
{
  echo "  running $@"
  "$@"
}

format_hostname() {
  local server_hostname="$1"
  local local_hostname="$2"
  local hostname_stripped="" new_hostname=""

  # remove the server hostname from the end of name
  hostname_stripped=${local_hostname%$server_hostname}
  if [ "$hostname_stripped" == "$local_hostname" ]; then
    # is not a simple alias to the host domain...add a dot
    # to the end of the name
    new_hostname+="${local_hostname}."
  else
    new_hostname="$hostname_stripped"
  fi

  echo -n "$new_hostname"
}

get_vhost_metadata_link() {
  local base_dir="$1"
  local vhost="$2"
  local vhost_sym_name="$3"
  local tmpl_short_name="$4"
  local param="$5"

  local metadata_link=""

  local config_dir="$base_dir/config/vhosts/$vhost"
  local config_prefix="$config_dir/apache_vhost"

  local apache_svc_dir="$base_dir/config/packages/apache_vhost"
  local apache_svc_local_dir="$base_dir/config/packages/apache_vhost/local/params"

  local vhost_name_link="$config_prefix:_:name:$vhost_sym_name"
  local vhn=`deref_contents "$vhost_name_link"`

  local this_vhost_prefix="$config_prefix:$vhn"

  # TODO: define the template

  # check for these parameters in the following order:
  # 1) vhost     2) template   3) server
  #
  # checks:
  #        config/vhosts/<vhost>
  #        config/packages/apache_vhost/local/params/
  #        config/packages/apache_vhost/

  if [ -L "$this_vhost_prefix:_:$param" ]; then
    metadata_link="$this_vhost_prefix:_:$param"
  elif [ -L "$config_dir/template:$tmpl_short_name:_:$param" ]; then
    metadata_link="$config_dir/template:$tmpl_short_name:_:$param"
  elif [ -L "$apache_svc_local_dir/template:$tmpl_short_name:_:$param" ]; then
    metadata_link="$apache_svc_local_dir/template:$tmpl_short_name:_:$param"
  elif [ -L "$apache_svc_local_dir/_:$param" ]; then
    metadata_link="$apache_svc_local_dir/_:$param"
  elif [ -L "$apache_svc_dir/template:$tmpl_short_name:_:$param" ]; then
    metadata_link="$apache_svc_dir/template:$tmpl_short_name:_:$param"
  elif [ -L "$apache_svc_dir/_:$param" ]; then
    metadata_link="$apache_svc_dir/_:$param"
  fi

  if [ -n "$metadata_link" ]; then
    echo -n "$metadata_link"
    return 0
  else
    return 1
  fi
}

get_template_file() {
  local base_dir="$1"
  local vhost="$2"
  local vhost_sym_name="$3"

  local config_dir="$base_dir/config/vhosts/$vhost"
  local config_prefix="$config_dir/apache_vhost"

  local apache_svc_dir="$base_dir/config/packages/apache_vhost"
  local vhost_name_link="$config_prefix:_:name:$vhost_sym_name"

  local vhn=`deref_contents "$vhost_name_link"`

  local vhost_prefix="$config_prefix:$vhn"

  # 'template' is a special variable
  # as it's used below, and not set as a variable
  if [ -L "$vhost_prefix:_:template" ]; then
    local template_link="$vhost_prefix:_:template"
    local vhost_template=`deref_contents "$template_link"`
    if [ $? -ne 0 ]; then
      echo "$FUNCNAME(): error - unable to get vhost template name" 1>&2
      return 1
    fi
  elif [ -L "$vhost_prefix:_:template_ref" ]; then
    local tmpl_ref_name=`deref_contents "$vhost_prefix:_:template_ref"`
    if [ $? -eq 0 ]; then
      vhost_template=`deref_os_prop "$we_base_dir" "$tmpl_ref_name"`
    else
      echo "$FUNCNAME(): error - unable to de-reference template for vhost $vhn" 1>&2
      return 1
    fi
  fi

  # rename the variable below, use a dedicated variable for apache_svc
  local tmpl_basename=`basename "$vhost_template"`
  local local_template="$apache_svc_config_dir/templates/local/$tmpl_basename"
  local template_file="$apache_svc_config_dir/templates/$tmpl_basename"
  local tmpl_short_name=${tmpl_basename%.*}

  if [ -f "$local_template" ]; then
    template_file="$local_template"
  elif [ ! -f "$template_file" ]; then
    echo "$FUNCNAME(): error - missing template file '$template_file'" 1>&2
    return 1
  fi

  echo -n "$template_file"
}

# main

[ $# -eq 0 -o -z "$1" ] && usage

dir=`dirname "$0"`

vhost="$1"
user="w_$vhost"

"$dir/check-vhost-name" config "$vhost" || error

we_base_dir=`readlink -e "$dir/.."`

lib_file="$we_base_dir/lib/functions"
if ! source "$lib_file"; then
  error "unable to source lib file '$lib_file'"
fi

assign_deref_os_fs_path_ex_or_exit apachectl "$we_base_dir" pathnames/sbin/apachectl
assign_deref_os_fs_path_ex_or_exit virtwww_dir "$we_base_dir" pathnames/etc/apache_vhosts
assign_deref_os_prop_or_exit websites_basedir "$we_base_dir" websites_basedir

virtwww_file="$virtwww_dir/$user.conf"
virtwww_file_old="$virtwww_file.old"
config_dir="$we_base_dir/config/vhosts/$vhost"
apache_svc_config_dir="$we_base_dir/config/packages/apache_vhost"
server_hostname_file="$we_base_dir/config/names/default"

tmp_new_vhost_file=`mktemp "$virtwww_file.XXXXXXXXXXXXXXX"`
if [ $? -ne 0 ]; then
  error "unable to create temporary file"
fi
trap 'ex=$?; rm -f "$tmp_new_vhost_file"; exit $ex;' EXIT INT TERM QUIT

vhost_bkp_file=`mktemp "$virtwww_file.bkp.XXXXXXXXXXXXXXX"`
if [ $? -ne 0 ]; then
  error "unable to create a temporary backup file"
fi
trap 'ex=$?; rm -f "$tmp_new_vhost_file"; rm -f "$vhost_bkp_file"; exit $ex;' \
 EXIT INT TERM QUIT

if ! cat "$virtwww_file" > "$vhost_bkp_file"; then
  error "unable to write a copy of '$virtwww_file' into '$vhost_bkp_file'"
fi

if ! server_hostname=`deref_contents "$server_hostname_file"`; then
  error "unable to get server hostname from link '$server_hostname_file'"
fi

declare -i n_vhosts=0
vhost_prefix_f="$config_dir/apache_vhost"
system_templates_prefix="$apache_svc_config_dir/template"

declare -a super_special_params=( 'IP' 'Port' )
declare -a special_params=( 'ServerName' 'DocumentRoot' 'SuexecUserGroup' \
                                'CustomLog' 'ErrorLog' )

for this_vhost_prefix in "$vhost_prefix_f:"[0-9] "$vhost_prefix_f:"[0-9][0-9]; do
  if [ "$this_vhost_prefix" == "$vhost_prefix_f:[0-9]" -o \
       "$this_vhost_prefix" == "$vhost_prefix_f:[0-9][0-9]" ]; then
    continue
  fi

  vhn=${this_vhost_prefix_f##*:}
  sed_line=""
  sed_include_str=""
  vhost_base_str=`basename "$this_vhost_prefix"`

  vhost_name=`deref_contents "$this_vhost_prefix"`
  if [ $? -ne 0 -o -z "$vhost_name" ]; then
    echo "Warning: skipping vhost '$vhost_name', unable to get vhost name" 1>&2
    continue
  fi

  declare -a vhost_param_links_ar=()
  declare -a vhost_rpl_param_links_ar=()
  declare -a vhost_tmpl_param_links_ar=()
  declare -a vhost_rpl_tmpl_param_links_ar=()
  declare -a vhost_sys_includes_ar=()
  declare -a vhost_rpl_sys_includes_ar=()
  declare -a vhost_usr_includes_ar=()
  declare -a vhost_rpl_usr_includes_ar=()
  declare -a vhost_var_links_ar=()
  declare -a vhost_rpl_var_links_ar=()

  template_file=`get_template_file "$we_base_dir" "$vhost" "$vhost_name"`
  if [ $? -ne 0 ]; then
    error "unable to de-reference template for vhost $vhn"
  fi
  tmpl_short_name=`basename "$template_file"`
  tmpl_short_name=${tmpl_short_name%%.*}

  if ! cat "$template_file" >>"$tmp_new_vhost_file"; then
    error "unable to copy template contents to '$tmp_new_vhost_file'"
  fi

  # Super-special required parameters
  for param in ${super_special_params[*]}; do
    # check for these parameters in the following order:
    # 1) vhost     2) template   3) server
    if ! param_link=`get_vhost_metadata_link "$we_base_dir" "$vhost" "$vhost_name" \
                              "$tmpl_short_name" "$param"`; then
      error "unable to determine apache parameter $param"
    fi

    param_name=${param_link##*:}
    param_value=`readlink "$param_link"`
    param_name_escaped=`escape_sed "${param_name^^}"`
    param_value_escaped=`escape_sed "$param_value"`

    sed_line+="s/@@__PARAM_${param_name_escaped}__@@/$param_value_escaped/g;"
  done

  # check if this template is meant to replicate data from another vhost
  # if it is, then all data (params, includes and vars) not set explictily
  # to this vhost, are copied from the replica template
  # 
  # This is meant to simplify the setup and maintanance of vhosts that are
  # basically replicas of others (e.g.  SSL x main)
  replicate_link="$this_vhost_prefix:_:replicate"
  if [ -L "$replicate_link" ]; then
    repl_name=`deref_contents "$replicate_link"`
    repl_n=`deref_contents "$vhost_prefix_f:_:name:$repl_name"`
    repl_prefix="$vhost_prefix_f:$repl_n"
    repl_template_file=`get_template_file "$we_base_dir" "$vhost" "$repl_name"`
    repl_template_basename=`basename "$repl_template_file"`
    repl_template=${replicate_template_basename%%.*}
  fi

  # a few special verbatim parameters
  # these are about system defaults, to avoid having to create links on all
  # vhosts
  #
  # This way when a larger system wide change happens, we just update it
  # once and it applies to all vhosts
  params_str=""
  for param in ${special_params[*]}; do
    if pl=`get_vhost_metadata_link "$we_base_dir" "$vhost" "$vhost_name" "$tmpl_short_name" "$param"`; then
      vhost_param_links_ar+=( "$pl" )
    elif [ -n "$repl_name" ]; then
      # if this vhost is set to replicate parameters from another vhost, then do
      # it now. The parameters are only replicated if they're not set in this
      # vhost
      if pl=`get_vhost_metadata_link "$we_base_dir" "$vhost" "$repl_name" \
                                                 "$repl_template" "$param"`; then
        vhost_rpl_param_links_ar+=( "$pl" )
      fi
    else
      error "unable to determine apache parameter $param"
    fi
  done


  # generic Apache parameters for the template, available system wide.
  # Have the same intent of the previous one, to make it easy to distribute
  # mass updates on system templates
  for P in "$system_templates_prefix:$tmpl_short_name:param:"[0-9]:*; do
    [ "$P" == "$system_templates_prefix:$tmpl_short_name:param:[0-9]:*" ] && break

    vhost_tmpl_param_links_ar+=( "$P" )
  done

  # if this vhost is a replica of another, then check if there are parameters 
  # to be imported from the template of the original vhost
  if [ -n "$repl_name" ]; then
    for P in "$system_templates_prefix:$repl_template:param:"[0-9]:*; do
      [ "$P" == "$system_templates_prefix:$repl_template:param:[0-9]:*" ] && break

      p_name=${P##*:}
      p_number_step_1=${P##$system_templates_prefix:$repl_template:param:}
      p_number=${p_number_step_1%:*}

      sys_p="$system_templates_prefix:$tmpl_short_name:param"
      if [ ! -L "$sys_p:$p_number:$p_name" ]; then
        vhost_rpl_tmpl_param_links_ar+=( "$P" )
      fi
    done
  fi


  # other less important (or less widely-distributed parameters)
  for P in "$this_vhost_prefix:param:"[0-9]:*; do
    [ "$P" == "$this_vhost_prefix:param:[0-9]:*" ] && break

    vhost_param_links_ar+=( "$P" )
  done

  # if this vhost is a replica of another, then check if there are parameters 
  # to be imported from the template of the original vhost
  # 
  # NOTE: this is right, it's not a duplication of the previous section
  #
  if [ -n "$repl_name" ]; then
    for P in "$repl_prefix:param:"[0-9]:*; do
      [ "$P" == "$repl_prefix:param:[0-9]:*" ] && break

      p_name=${P##*:}
      p_number_step_1=${P##$repl_prefix:param:}
      p_number=${p_number_step_1%:*}

      if [ ! -L "$repl_prefix:param:$p_number:$p_name" ]; then
        vhost_rpl_tmpl_param_links_ar+=( "$P" )
      fi
    done
  fi

  sys_inc_base="$system_templates_prefix:$tmpl_short_name:include"
  for inc in "$sys_inc_base":*; do
    [ "$inc" == "$sys_inc_base:*" ] && break

    vhost_sys_includes_ar+=( "$inc" )
  done

  # if this template is marked as a replica of another template, then re-use
  # the system included templates from the replica
  # It takes care not to duplicate includes that are already included into
  # this one
  if [ -L "$repl_name" ]; then
    repl_inc_base="$system_templates_prefix:$repl_template:include"

    for inc in "$repl_inc_base":*; do
      [ "$inc" == "$repl_inc_base:*" ] && break

      inc_basename=${repl_inc_base##*:}
      if [ -L "$sys_inc_base:$inc_basename" ]; then
        continue # the base template already has this include
      fi

      vhost_rpl_sys_includes_ar+=( "$inc" )
    done
  fi

  usr_inc_base="$this_vhost_prefix:_:include:"
  for inc in "$usr_inc_base"*; do
    [ "$inc" == "$usr_inc_base*" ] && break

    vhost_usr_includes_ar+=( "$inc" )

  done

  if [ -n "$repl_name" ]; then
    rpl_inc_base="$rpl_prefix:_:include:"
    for inc in "$rpl_inc_base"*; do
      [ "$inc" == "$rpl_inc_base*" ] && break

      rpl_inc_basename=${rpl_inc_base##*:}
      if [ ! -L "$usr_inc_base:$rpl_inc_basename" ]; then
        vhost_rpl_usr_includes_ar+=( "$inc" )
      fi

    done
  fi

  for V in "$this_vhost_prefix:var:"*; do
    [ "$V" == "$this_vhost_prefix:var:*" ] && break

    vhost_var_links_ar+=( "$V" )
  done

  if [ -n "$repl_name" ]; then
    for V in "$repl_prefix:var:"*; do
      [ "$V" == "$repl_prefix:var:*" ] && break

      repl_var_basename=${V##*:}
      if [ ! -L "$this_vhost_prefix:var:$rpl_var_basename" ]; then
        vhost_rpl_var_links_ar+=( "$V" )
      fi
    done
  fi


  #####
  # replace all parameters collected previously
  #####

  # parameters
  for param_link in ${vhost_param_links_ar[@]} ${vhost_rpl_param_links_ar[@]} \
        ${vhost_tmpl_param_links_ar[@]} ${vhost_rpl_tmpl_param_links_ar[@]}; do

    param_name=${param_link##*:}
    param_name_escaped=`escape_sed "${param_name^^}"`

    param_dirname=`dirname "$param_link"`
    param_basename=`basename "$param_link"`

    # check if the user overwrote this parameters server wide
    local_param_link="$param_dirname/local/params/$param_basename"
    if [ -L "$local_param_link" ]; then
      param_value=`readlink "$local_param_link"`
    else
      # otherwise, use the defaults provided
      param_value=`readlink "$param_link"`
    fi
    
    param_value_escaped=`escape_sed "$param_value"`

    params_str+="  $param_name $param_value"$'\n'
    sed_line+="s/@@__PARAM_${param_name_escaped}__@@/$param_value_escaped/g;"
  done

  # includes
  sys_include_str=""
  for inc in ${vhost_sys_includes_ar[@]} ${vhost_rpl_sys_includes_ar[@]} \
             ; do

    include_file=`readlink "$inc"`
    if [ $? -ne 0 -o -z "$include_file" ]; then
      error "unable to de-reference file '$inc'"
    fi

    tmpl_local_file="$apache_svc_config_dir/local/templates/$include_file"
    tmpl_file="$apache_svc_config_dir/templates/$include_file"
    sys_include_str+="  # system defined template include: $tmpl_file"$'\n'
    if [ -f "$tmpl_local_file" ]; then
      tmpl_file="$tmpl_local_file"
    elif [ ! -f "$tmpl_file" ]; then
      error "missing template $tmpl_file, when parsing $vhost_name"
    fi
      
    if ! tmp_str=`cat "$tmpl_file"`; then
      error "unable to include template file '$tmpl_file' for template $vhost_template"
    fi

    sys_include_str+="$tmp_str"$'\n'
    sys_include_str+="  # // end of system defined template include: $tmpl_file"$'\n\n'

  done

  if [ -n "$sys_include_str" ]; then
    sys_include_str_escaped=`escape_sed "$sys_include_str"`
    sed_include_str+="s/^[[:space:]]*#[[:space:]]*@@__SYSTEM_INCLUDES__@@/$sys_include_str_escaped/g;"
  else
    sed_include_str+="/^[[:space:]]*#[[:space:]]*@@__SYSTEM_INCLUDES__@@/d;"
  fi

  # user defined includes
  usr_include_str=""
  for usr_inc in ${vhost_usr_includes_ar[@]} ${vhost_rpl_usr_includes_ar[@]}; do
    include_file=`readlink "$inc"`
    if [ $? -ne 0 -o -z "$include_file" ]; then
      error "unable to de-reference file '$inc'"
    fi

    usr_include_str+="  # user defined template include: $tmpl_file"$'\n'
    tmpl_local_file="$apache_svc_config_dir/local/templates/$include_file"
    tmpl_file="$apache_svc_config_dir/templates/$include_file"

    if [ -f "$tmpl_local_file" ]; then
      tmpl_file="$tmpl_local_file"
    elif [ ! -f "$tmpl_file" ]; then
      error "missing template $tmpl_file, when parsing $vhost_name"
    fi
      
    if ! tmp_str=`cat "$tmpl_file"`; then
      error "unable to include template file '$tmpl_file' for template $vhost_template"
    fi

    usr_include_str+="$tmp_str"$'\n'
    usr_include_str+="  # // end of user defined template include: $tmpl_file"$'\n\n'
  done

  if [ -n "$usr_include_str" ]; then
    usr_include_str_escaped=`escape_sed "$usr_include_str"`
    sed_include_str+="s/^[[:space:]]*#[[:space:]]*@@__USER_INCLUDES__@@/$usr_include_str_escaped/g;"
  else
    sed_include_str+="/^[[:space:]]*#[[:space:]]*@@__USER_INCLUDES__@@/d;"
  fi

  if [ -n "$params_str" ]; then
    params_str_escaped=`escape_sed "$params_str"`
    sed_line+="s/^[[:space:]]*#[[:space:]]*@@__PARAMS__@@/$params_str_escaped/g;"
  else
    sed_line+="/^[[:space:]]*#[[:space:]]*@@__PARAMS__@@/d;"
  fi

  # variables
  for var_link in ${vhost_var_links_ar[@]} ${vhost_rpl_var_links_ar[@]}; do
    var_basename=`basename "$var_link"`
    var_name=${var_basename##*:var:}
    var_value=`readlink "$var_link"`

    var_name_escaped=`escape_sed "${var_name^^}"`
    var_value_escaped=`escape_sed "$var_value"`

    sed_line+="s/@@__VAR_${var_name_escaped}__@@/$var_value_escape/g;"
  done


  # first include all external files
  sed -i -e "$sed_include_str" "$tmp_new_vhost_file"
  if [ $? -ne 0 ]; then
    error "unable to update include lines on file '$tmp_new_vhost_file'"
  fi

  sed_line+="s/@@__DEVPANEL_BASEDIR__@@/`escape_sed "$we_base_dir"`/g;"
  sed_line+="s/@@__WEBSITES_BASEDIR__@@/`escape_sed "$websites_basedir"`/g;"
  sed_line+="s/@@__SERVER_HOSTNAME__@@/`escape_sed "$server_hostname"`/g;"
  sed_line+="s/@@__VHOST__@@/`escape_sed "$vhost"`/g;"
  sed_line+="s/@@__TEMPLATE_FILE__@@/`escape_sed "$template_file"`/g;"
  sed_line+="s/@@__TEMPLATE_FILE_BASENAME__@@/`escape_sed "$vhost_template"`/g;"

  # then replace all parameters and variables
  sed -i -e "$sed_line" "$tmp_new_vhost_file"
  if [ $? -ne 0 ]; then
    error "unable to replace variables"
  fi

  echo >> "$tmp_new_vhost_file" # add a new line to make the file easier to
                                # read

  n_vhosts+=1
done

if [ $n_vhosts -eq 0 ]; then
  error "No vhost updated."
fi

echo Validating apache config syntax

if ! cat "$tmp_new_vhost_file" > "$virtwww_file"; then
  error "unable to copy contents from '$tmp_new_vhost_file'"\
" to '$virtwww_file'"
fi

if ! "$apachectl" configtest; then
  echo Syntax validation failed, reverting the changes
  if ! cat "$vhost_bkp_file" >"$virtwww_file"; then
    error "unable to copy back the contents from $vhost_bkp_file"\
" to '$virtwww_file'"
  fi

  echo
  echo "-- BROKEN TEMPLATE FILE (?) --"
  cat -n "$tmp_new_vhost_file"
  echo "-- END OF TEMPLATE --"
  echo

  if ! "$apachectl" configtest; then
    error "Apache config is broken, call a system administrator NOW!"
  fi
else
  cp -f "$vhost_bkp_file" "$virtwww_file_old"
  if [ $? -eq 0 ]; then
    echo "Successfully saved previous vhost file on $virtwww_file_old"
  else
    echo "Warning: unable to save a copy of the old file (not critical)" 1>&2
  fi
fi

echo "Successfully updated vhost $vhost on file $virtwww_file"
echo Restarting apache

run "$apachectl" graceful || \
  error "Cannot restart apache, call a system administrator NOW!"
