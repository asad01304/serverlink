#!/bin/bash

usage() {
  local prog=$(basename "$0")
  echo "

Protects access to the given vhost with http authentication.

Usage: $prog [ options ] <vhost>

  Options:
    -R  <string>          sets the realm of authentication
    -p                    read user passwords from stdin
    -n                    don't apply the updates to apache config
                          immediately
"

  exit 1
}

# main()

[ $# -lt 1 ] && usage

unset read_pw_stdin
immediately_update=1 # default

getopt_flags='pb:B:R:n'
while getopts $getopt_flags OPT ; do
  case "$OPT" in
    b)
      # do nothing, is here just for backwards compatibilty
      :
      ;;
    B)
      # do nothing, is here just for backwards compatibilty
      :
      ;;
    R)
      # do nothing, is here just for backwards compatibilty
      :
      ;;
    p)
      read_pw_stdin=1
      ;;
    n)
      unset immediately_update
      ;;
    ?)
      usage
      ;;
  esac
done
[ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

script_name=`basename "$0"`
self_bin=`readlink -e "$0"`
dir=`dirname "$self_bin"`
base_dir=`readlink -e "$dir/.."`
dir_bin="$base_dir/bin"
metadata_handler="$base_dir/libexec/apache-metadata-handler"

vhost="$1"
password="$2"
user="w_$vhost"

# using mode archive: it's OK to operate on a locked vhost
"$dir/check-vhost-name" archive "$vhost" || exit 1

lib_file="$base_dir/lib/functions"
flag_file="$base_dir/lib/variables"
for lib_f in "$flag_file" "$lib_file"; do
  if ! source "$lib_f"; then
    echo "Error: unable to source lib file '$lib_f'" 1>&2
    exit 1
  fi
done

if [ -n "$DEVPANEL_VHOST_HTPASSWD_LOCK_FLAG" ]; then
  flag_str="$DEVPANEL_VHOST_HTPASSWD_LOCK_FLAG"
else
  error "missing variable DEVPANEL_VHOST_HTPASSWD_LOCK_FLAG on file '$flag_file'"
fi

unset is_locked
flag_link="$base_dir/config/vhosts/$vhost/$flag_str"
if [ -L "$flag_link" ]; then
  is_locked=1
fi

if [ "$script_name" == "htaccess-lock-vhost" ]; then
  if [ -z "$is_locked" ]; then
    "$metadata_handler" -q "$vhost" <<< "set $flag_str 1"$'\n'
    if [ $? -ne 0 ]; then
      error "unable to set lock flag on vhost '$vhost'"
    fi
  else
    echo "Warning: vhost '$vhost' is already locked..." >&2
  fi

  main_ex=0 # so far good, most things have succeeded enough up to now

  su -l -c '[ ! -f "~/.htpasswd" ] && touch ~/.htpasswd' "$user"
  if [ $? -ne 0 ]; then
    echo "Warning: unable to create .htpasswd." 1>&2
  else
    su -l -c 'chmod 640 ~/.htpasswd' "$user"
  fi

  if [ -n "$read_pw_stdin" ]; then
    su -l -c "$dir_bin/htpasswd-bulk ~/.htpasswd" "$user"
    status=$?
    main_ex=$status
    if [ $status -eq 0 ]; then
      echo "Successfully updated the passwords."
    else
      echo "Error: unable to update user/passwords. htpasswd-bulk returned $status" 1>&2
    fi
  fi
elif [ "$script_name" == "htaccess-unlock-vhost" ]; then
  "$metadata_handler" -q "$vhost" <<< "rm $flag_str"$'\n'
  if [ $? -ne 0 ]; then
    error "unable to remove lock flag"
  fi
  main_ex=0
elif [ "$script_name" == "htaccess-lock-status-vhost" ]; then
  # temporary backwards compatibility
  if [ -n "$is_locked" ]; then
    echo 1
  else
    echo 0
  fi
  exit 0
else
  error "unknown base script name"
fi

if [ $main_ex -ne 0 ]; then
  exit $main_ex
else
  if   [ "$script_name" == "htaccess-lock-vhost" ]; then
    verb="enabled"
  elif [ "$script_name" == "htaccess-unlock-vhost" ]; then
    verb="disabled"
  fi

  if [ -n "$immediately_update" ]; then
    "$base_dir/libexec/config-vhost-apache" "$vhost"
    if [ $? -ne 0 ]; then
      error "vhost configured, but can't update apache."
    fi

    echo "Successfully $verb htpasswd protection on vhost '$vhost'."
  else
    echo "Warning: configuration changed, but not immediately applied." 1>&2
  fi

  exit $main_ex
fi
