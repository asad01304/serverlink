#!/bin/bash

usage() {
  echo "Usage: `basename "$0"`"

  exit 1
}

is_installed() {
  local pkg="$1"
  local ver="$2"
  local system_dir="$3"

  if [ -L "$system_dir/config/packages/$pkg/version" ]; then
    return 0
  else
    return 1
  fi
}

has_config_link() {
  local system_dir="$1"
  local pkg="$2"
  local link="$3"

  if [ -L "$system_dir/config/packages/$pkg/$link" ]; then
    return 0
  else
    return 1
  fi
}

is_to_skip_install() {
  local system_dir="$1"
  local pkg="$2"

  has_config_link "$system_dir" "$pkg" dont_install
}

is_to_skip_updates() {
  local system_dir="$1"
  local pkg="$2"

  has_config_link "$system_dir" "$pkg" dont_update
}

needs_update() {
  local pkg="$1"
  local ver="$2"
  local system_dir="$3"

  local curr_ver
  local link_file="$system_dir/config/packages/$pkg/version"

  # return 2 == internal error
  # return 1 == no update needed

  if [ -L "$link_file" ]; then
    curr_ver=`readlink "$link_file"`
    if [ $? -ne 0 -o -z "$curr_ver" ]; then
      echo "$FUNCNAME(): unable to get current version" 1>&2
      return 2
    elif [ "$curr_ver" == "$ver" ]; then
      return 1
    else
      return 0
    fi
  elif [ -e "$link_file" -a ! -L "$link_file" ]; then
    echo "$FUNCNAME(): path '$link_file' is not a link" 1>&2
    return 2
  else
    return 1
  fi
}

assemble_pkg_url() {
  local base_url="$1"
  local pkg_name="$2"
  local pkg_version="$3"
  local distro="$4"
  local distro_version="$5"
  local arch="$6"

  local url
  local relative_url

  relative_url="$pkg_name/${pkg_name}-${pkg_version}"
  if [ -n "$distro" -a "$distro" != "-" ]; then
    relative_url+="-$distro"
  fi

  if [ -n "$distro_version" -a "$distro_version" != "-" ]; then
    relative_url+="-$distro_version"
  fi

  if [ -n "$arch" -a "$arch" != "-" ]; then
    relative_url+="-$arch"
  fi

  local previous_url="$base_url" stripped_url=""
  while echo "$previous_url" | egrep -q '^[a-z0-9A-Z]+://[^/]+/'; do
    # recursively remove the /path/some/other/nested/path from the URL 
    # until all paths are removed and remains only the proto/host
    stripped_url=${previous_url%/*}
    if [ "$stripped_url" != "$previous_url" ]; then
      previous_url="$stripped_url"
    else
      break
    fi
  done

  url="$stripped_url/$relative_url.tar.gz"

  echo "$url"
}

assemble_pkg_filename() {
  local pkg_name="$1"
  local pkg_version="$2"
  local distro="$3"
  local distro_version="$4"
  local arch="$5"

  local filename

  filename="${pkg_name}-${pkg_version}"
  if [ -n "$distro" -a "$distro" != "-" ]; then
    filename+="-$distro"
  fi

  if [ -n "$distro_version" -a "$distro_version" != "-" ]; then
    filename+="-$distro_version"
  fi

  if [ -n "$arch" -a "$arch" != "-" ]; then
    filename+="-$arch"
  fi

  filename+=".tar.gz"

  echo "$filename"
}

usage() {
  echo "Usage: `basename "$0"` [ options ] -y

  Options:
    -y            effectively update
    -h            show this usage msg
"
  exit 1
}

# main

declare -i verbose=0
getopt_flags='hyv'
unset yes_sure_update
while getopts $getopt_flags OPTN; do
  case $OPTN in
    y)
      yes_sure_update=1
      ;;
    v)
      verbose+=1
      ;;
    h|*)
      usage
      ;;
  esac
done
[ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

if [ -z "$yes_sure_update" ]; then
  usage
fi

sep=`echo -e '\x09'` # use tab as a separator
self_bin=`readlink -e "$0"`
curr_dir=`dirname "$self_bin"`
system_dir=`readlink -e "$curr_dir/.."`
lib_file="$system_dir/lib/functions"

if ! source "$lib_file"; then
  echo "Error: unable to source file '$lib_file'" 1>&2
  exit 1
fi

assign_deref_os_prop_or_exit packages_url "$system_dir" packages_url
if deref_os_prop "$system_dir" no_package_updates &>/dev/null; then
  error "this system is configured not to have automated updates."
fi

# should not use /tmp here because the need to execute post-install and
# post-update scripts, and it breaks if /tmp is mounted with noexec
if ! tmp_dir=`mktemp -d "$system_dir/var/tmp/tmp.XXXXXX"`; then
  error "unable to create temporary directory"
fi
trap 'exit 1' INT HUP TERM QUIT
trap 'rm -rf "$tmp_dir"' EXIT

updates_file="$tmp_dir/updates_$base_channel.txt"

if ! download_file "$packages_url" "$updates_file"; then
  error "unable to download update file"
fi

linux_distro=$(wedp_auto_detect_distro)
if [ $? -ne 0 -o -z "$linux_distro" ]; then
  error "unable to detect the linux distribution of this server"
fi

linux_arch=$(uname -m)
if [ $? -ne 0 -o -z "$linux_arch" ]; then
  error "unable to detect the machine architecture"
fi

declare -i n_updated=0 n_failed_update=0 n_installed=0 n_failed_install=0
while read update_line; do
  # ignore: empty lines, line with only spaces or lines starting with "#"
  if [ -z "$update_line" ] || [[ "$update_line" =~ ^\ +$ ]] || \
    [[ "$update_line" =~ ^\ *# ]]; then
    continue
  fi

  unset v_installed v_needs_update

  IFS="$sep" read package latest_version distro distro_version arch flags <<< "$update_line"
  pkg_url=`assemble_pkg_url "$packages_url" "$package" "$latest_version" \
    "$distro" "$distro_version" "$arch"`
 
  # skip if the package is for a specific distro that not the current one
  if [ "$distro" != "-" -a "$distro" != "$linux_distro" ]; then
    continue
  fi

  # skip if it's for an architecture other than this one
  if [ "$arch" != "-" -a "$arch" != "$linux_arch" ]; then
    continue
  fi

  pkg_file="$tmp_dir/"
  pkg_file+=`assemble_pkg_filename "$package" "$latest_version" \
    "$distro" "$distro_version" "$arch"`

  if is_installed "$package" "$latest_version" "$system_dir"; then
    v_installed=1
  fi

  if [ -z "$v_installed" ] && is_to_skip_install "$system_dir" "$package"; then
    [ $verbose -gt 0 ] && echo "Skipping $package, configured not to install"
    continue # not installed, and configured not to install
  elif [ -n "$v_installed" ] && is_to_skip_updates "$system_dir" "$package"; then
    [ $verbose -gt 0 ] && echo "Skipping $package, configured not to update"
    continue # installed but configured not to update
  elif [ -n "$v_installed" ] && needs_update "$package" "$latest_version" "$system_dir"; then
    v_needs_update=1 # installed and needs update
  elif [ -n "$v_installed" -a -z "$v_needs_update" ]; then
    continue # is installed and doesn't need update
  fi

  if [ -z "$v_installed" -o -n "$v_needs_update" ]; then
    echo "Downloading $package $latest_version from $pkg_url..." 1>&2
    if ! download_file "$pkg_url" "$pkg_file"; then
      echo "Warning: failed download for package '$package' version '$latest_version' from URL '$pkg_url'" 1>&2
      continue
    fi
  fi

  if [ -z "$v_installed" ]; then
    echo "Installing $package version $latest_version..."
    devpanel_install_pkg "$package" "$latest_version" "$pkg_file" "$system_dir"
    if [ $? -eq 0 ]; then
      n_installed+=1
    else
      n_failed_install+=1
    fi
  elif [ -n "$v_needs_update" ]; then
    echo "Updating $package version $latest_version..."
    devpanel_update_pkg "$package" "$latest_version" "$pkg_file" "$system_dir"
    if [ $? -eq 0 ]; then
      n_updated+=1
    else
      n_failed_update=1
    fi
  fi
done < "$updates_file"

if [ $n_failed_update -eq 0 -a $n_failed_install -eq 0 \
  -a $n_updated -eq 0 -a $n_installed -eq 0 ]; then

  echo "Everything up to date."
  exit 0
fi

if [ $n_failed_update -gt 0 ]; then
  echo "Failed to update $n_failed_update packages."
fi

if [ $n_failed_install -gt 0 ]; then
  echo "Failed to install $n_failed_install packages."
fi

if [ $n_updated -gt 0 ]; then
  echo "Updated $n_updated packages."
fi

if [ $n_installed -gt 0 ]; then
  echo "Installed $n_installed packages."
elif [ $n_installed -eq 0 -a $n_updated -eq 0 ]; then
  echo "No packages were updated."
fi

exit 0
